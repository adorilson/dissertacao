<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 25.1.7">

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                list = list.charAt(0) + list.substring(1).toLowerCase();"
        errorLine2="                                                          ~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/App.java"
            line="179"
            column="59"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            contentText = contentText.charAt(0) + contentText.substring(1).toLowerCase();"
        errorLine2="                                                                           ~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/BathService.java"
            line="265"
            column="76"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return String.format(&quot;NotificationPrTask(n=%s, is_post_event=%b, flags=%d)&quot;,"
        errorLine2="                      ~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationPrTask.java"
            line="56"
            column="23"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                String itemsText = sb.toString().toLowerCase();"
        errorLine2="                                                 ~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/fragments/PreferenceFragment.java"
            line="313"
            column="50"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.transition.TransitionSet#ORDERING_TOGETHER`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                    .setOrdering(TransitionSet.ORDERING_TOGETHER)"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="267"
            column="34"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.transition.TransitionSet#ORDERING_TOGETHER`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                    .setOrdering(TransitionSet.ORDERING_TOGETHER)"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="271"
            column="34"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.transition.Fade#OUT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                    .addTransition(new Fade(Fade.OUT).setDuration(200))"
        errorLine2="                                            ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="272"
            column="45"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.transition.Fade#IN`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                    .addTransition(new Fade(Fade.IN).setStartDelay(80))"
        errorLine2="                                            ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="273"
            column="45"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#EXTRA_TITLE_BIG`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        n.titleBigText = extras.getCharSequence(Notification.EXTRA_TITLE_BIG);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="154"
            column="49"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#EXTRA_TITLE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        n.titleText = extras.getCharSequence(Notification.EXTRA_TITLE);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="155"
            column="46"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#EXTRA_INFO_TEXT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        n.infoText = extras.getCharSequence(Notification.EXTRA_INFO_TEXT);"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="156"
            column="45"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#EXTRA_SUB_TEXT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        n.subText = extras.getCharSequence(Notification.EXTRA_SUB_TEXT);"
        errorLine2="                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="157"
            column="44"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#EXTRA_SUMMARY_TEXT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        n.summaryText = extras.getCharSequence(Notification.EXTRA_SUMMARY_TEXT);"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="158"
            column="48"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.app.Notification#EXTRA_BIG_TEXT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        n.messageBigText = removeColorSpans(extras.getCharSequence(Notification.EXTRA_BIG_TEXT));"
        errorLine2="                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="159"
            column="68"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#EXTRA_TEXT`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        n.messageText = removeColorSpans(extras.getCharSequence(Notification.EXTRA_TEXT));"
        errorLine2="                                                                ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="160"
            column="65"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#EXTRA_TEXT_LINES`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        CharSequence[] lines = extras.getCharSequenceArray(Notification.EXTRA_TEXT_LINES);"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="162"
            column="60"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.view.View#SYSTEM_UI_FLAG_IMMERSIVE_STICKY`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/activities/KeyguardActivity.java"
            line="187"
            column="43"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.view.View#SYSTEM_UI_FLAG_IMMERSIVE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        int visibility = SYSTEM_UI_BASIC_FLAGS | View.SYSTEM_UI_FLAG_IMMERSIVE;"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/activities/KeyguardActivity.java"
            line="200"
            column="50"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.view.View#SYSTEM_UI_FLAG_IMMERSIVE_STICKY`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/snake/MainActivity.java"
            line="61"
            column="27"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.media.MediaMetadataEditor#BITMAP_KEY_ARTWORK`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            mMetadata.bitmap = data.getBitmap(MediaMetadataEditor.BITMAP_KEY_ARTWORK, null);"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="276"
            column="47"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.content.Context#MEDIA_SESSION_SERVICE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                .getSystemService(Context.MEDIA_SESSION_SERVICE);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="183"
            column="35"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.MediaMetadata#METADATA_KEY_MEDIA_ID`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                id = data.getString(MediaMetadata.METADATA_KEY_MEDIA_ID);"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="353"
            column="37"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.MediaMetadata#METADATA_KEY_MEDIA_ID`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                    id = data.getString(MediaMetadata.METADATA_KEY_MEDIA_ID);"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="359"
            column="41"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.MediaMetadata#METADATA_KEY_ARTIST`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            mMetadata.artist = data.getText(MediaMetadata.METADATA_KEY_ARTIST);"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="370"
            column="45"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.MediaMetadata#METADATA_KEY_ALBUM`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            mMetadata.album = data.getText(MediaMetadata.METADATA_KEY_ALBUM);"
        errorLine2="                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="371"
            column="44"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.MediaMetadata#METADATA_KEY_DURATION`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            mMetadata.duration = data.getLong(MediaMetadata.METADATA_KEY_DURATION);"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="372"
            column="47"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.MediaMetadata#METADATA_KEY_ART`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            Bitmap artwork = data.getBitmap(MediaMetadata.METADATA_KEY_ART);"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="376"
            column="45"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.MediaMetadata#METADATA_KEY_ALBUM_ART`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                artwork = data.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="378"
            column="42"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.media.session.PlaybackState#STATE_NONE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        updatePlaybackState(state == null ? PlaybackState.STATE_NONE : state.getState());"
        errorLine2="                                            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="399"
            column="45"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.view.View#SYSTEM_UI_FLAG_IMMERSIVE_STICKY`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        final int flags = SYSTEM_UI_BASIC_FLAGS | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/view/OverlayView.java"
            line="82"
            column="51"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.view.View#SYSTEM_UI_FLAG_IMMERSIVE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        final int flags = SYSTEM_UI_BASIC_FLAGS | View.SYSTEM_UI_FLAG_IMMERSIVE;"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/view/OverlayView.java"
            line="91"
            column="51"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.app.AppOpsManager#OPSTR_GET_USAGE_STATS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        int result = getAppOpsManager().checkOp(AppOpsManager.OPSTR_GET_USAGE_STATS, uid, packageName);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/permissions/PermissionUsageStats.java"
            line="68"
            column="49"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.app.AppOpsManager#MODE_ALLOWED`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        return result == AppOpsManager.MODE_ALLOWED;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/permissions/PermissionUsageStats.java"
            line="69"
            column="26"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.content.Context#APP_OPS_SERVICE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        return (AppOpsManager) mContext.getSystemService(Context.APP_OPS_SERVICE);"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/permissions/PermissionUsageStats.java"
            line="74"
            column="58"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.provider.Settings#ACTION_USAGE_ACCESS_SETTINGS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        return new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/permissions/PermissionUsageStats.java"
            line="83"
            column="27"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.os.PowerManager#ACTION_POWER_SAVE_MODE_CHANGED`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                intentFilter.addAction(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerSaveDetector.java"
            line="149"
            column="40"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 17 (current min is 16): `android.os.BatteryManager#BATTERY_PLUGGED_WIRELESS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                || plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS;"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="70"
            column="31"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 17 (current min is 16): `android.content.Context#DISPLAY_SERVICE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            DisplayManager dm = (DisplayManager) context.getSystemService(Context.DISPLAY_SERVICE);"
        errorLine2="                                                                          ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="77"
            column="75"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 19 (current min is 16): `android.view.Display#FLAG_PRESENTATION`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="                final boolean virtual = Operator.bitAnd(d.getFlags(), Display.FLAG_PRESENTATION);"
        errorLine2="                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="87"
            column="71"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 20 (current min is 16): `android.view.Display#STATE_ON`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            return display.getState() == Display.STATE_ON;"
        errorLine2="                                         ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="111"
            column="42"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.app.usage.UsageStatsManager#INTERVAL_DAILY`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="        List&lt;UsageStats> statsList = usm.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/utils/tasks/RunningTasksLollipop.java"
            line="68"
            column="58"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`he`&quot; should be called &quot;`iw`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:
&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.

Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.

To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/raw-he"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`id`&quot; should be called &quot;`in`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:
&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.

Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.

To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/raw-id"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`he`&quot; should be called &quot;`iw`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:
&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.

Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.

To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-he"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`id`&quot; should be called &quot;`in`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:
&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.

Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.

To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-id"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.transition.TransitionSet`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mTransitionJit = new TransitionSet()"
        errorLine2="                                 ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="266"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionSet#setOrdering`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .setOrdering(TransitionSet.ORDERING_TOGETHER)"
        errorLine2="                     ~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="267"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionSet#addTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new Fade())"
        errorLine2="                     ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="268"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.transition.Fade`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new Fade())"
        errorLine2="                                       ~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="268"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionSet#addTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new ChangeBounds());"
        errorLine2="                     ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="269"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.transition.ChangeBounds`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new ChangeBounds());"
        errorLine2="                                       ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="269"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.transition.TransitionSet`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mTransitionSwitchScene = new TransitionSet()"
        errorLine2="                                         ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="270"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionSet#setOrdering`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .setOrdering(TransitionSet.ORDERING_TOGETHER)"
        errorLine2="                     ~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="271"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.Fade#setDuration`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new Fade(Fade.OUT).setDuration(200))"
        errorLine2="                                                      ~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="272"
            column="55"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionSet#addTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new Fade(Fade.OUT).setDuration(200))"
        errorLine2="                     ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="272"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.transition.Fade`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new Fade(Fade.OUT).setDuration(200))"
        errorLine2="                                       ~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="272"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.Fade#setStartDelay`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new Fade(Fade.IN).setStartDelay(80))"
        errorLine2="                                                     ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="273"
            column="54"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionSet#addTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new Fade(Fade.IN).setStartDelay(80))"
        errorLine2="                     ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="273"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.ChangeBounds#setStartDelay`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new ChangeBounds().setStartDelay(80));"
        errorLine2="                                                      ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="274"
            column="55"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionSet#addTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new ChangeBounds().setStartDelay(80));"
        errorLine2="                     ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="274"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.transition.ChangeBounds`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    .addTransition(new ChangeBounds().setStartDelay(80));"
        errorLine2="                                       ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="274"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.widget.LinearLayout#isLaidOut`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (Device.hasKitKatApi()) animate &amp;= mSceneContainer.isLaidOut();"
        errorLine2="                                                              ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="987"
            column="63"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionManager#go`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                TransitionManager.go(scene, mTransitionSwitchScene);"
        errorLine2="                                  ~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="998"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionManager#go`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                TransitionManager.go(scene, mTransitionSwitchScene);"
        errorLine2="                                  ~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="1017"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.view.ViewGroup#isLaidOut`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                &amp;&amp; sceneRoot.isLaidOut()) {"
        errorLine2="                             ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="1437"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionManager#beginDelayedTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            TransitionManager.beginDelayedTransition(sceneRoot, transition);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="1438"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.app.Notification.Action#getRemoteInputs`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return RemoteInputUtils.toCompat(action.getRemoteInputs());"
        errorLine2="                                                    ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Action.java"
            line="143"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#actions`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Notification.Action[] src = notification.actions;"
        errorLine2="                                                     ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Action.java"
            line="157"
            column="54"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 19 (current min is 16): `android.app.Notification.Action#actionIntent`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                dst[i] = new Action(src[i].icon, src[i].title, src[i].actionIntent, remoteInputs);"
        errorLine2="                                                                      ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Action.java"
            line="167"
            column="71"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 19 (current min is 16): `android.app.Notification.Action#icon`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                dst[i] = new Action(src[i].icon, src[i].title, src[i].actionIntent, remoteInputs);"
        errorLine2="                                           ~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Action.java"
            line="167"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 19 (current min is 16): `android.app.Notification.Action#title`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                dst[i] = new Action(src[i].icon, src[i].title, src[i].actionIntent, remoteInputs);"
        errorLine2="                                                        ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Action.java"
            line="167"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 23 (current min is 16): `android.app.AlarmManager#setAndAllowWhileIdle`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            alarm.setAndAllowWhileIdle(AlarmManager.RTC_WAKEUP,"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/services/BaseStickyService.java"
            line="60"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.view.ViewGroup#getLayoutDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return Device.hasJellyBeanMR1Api() &amp;&amp; getLayoutDirection() == LAYOUT_DIRECTION_RTL;"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/widgets/DashboardLayout.java"
            line="148"
            column="47"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.view.ViewGroup#getPaddingStart`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                ? getPaddingStart()"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/widgets/DashboardLayout.java"
            line="154"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.text.format.DateFormat#getBestDateTimePattern`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final String fmt = DateFormat.getBestDateTimePattern(l, dateFormat);"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/DateView.java"
            line="108"
            column="43"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 19 (current min is 16): `android.app.Notification#extras`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return notification.extras;"
        errorLine2="                                ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="111"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 22 (current min is 16): `android.app.KeyguardManager#isDeviceLocked`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return Device.hasLollipopMR1Api() ? km.isDeviceLocked() : km.isKeyguardSecure();"
        errorLine2="                                               ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/KeyguardUtils.java"
            line="49"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.app.AlertDialog.Builder#setOnDismissListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                .setOnDismissListener(new DialogInterface.OnDismissListener() {"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/snake/MainActivity.java"
            line="120"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `new android.preference.DialogPreference`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(context, attrs, defStyleAttr, defStyleRes);"
        errorLine2="        ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/preferences/MaterialDialogPreference.java"
            line="53"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `new android.preference.DialogPreference`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(context);"
        errorLine2="        ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/preferences/MaterialDialogPreference.java"
            line="66"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 19 (current min is 16): `android.media.RemoteController.OnClientUpdateListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            new RemoteController.OnClientUpdateListener() {"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="59"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController#sendMediaKeyEvent`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        rc.sendMediaKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, keyCode));"
        errorLine2="           ~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="202"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController#sendMediaKeyEvent`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        rc.sendMediaKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));"
        errorLine2="           ~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="203"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController#seekTo`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        rc.seekTo(position);"
        errorLine2="           ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="217"
            column="12"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController#getEstimatedMediaPosition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return rc.getEstimatedMediaPosition();"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="239"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.MetadataEditor#getString`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.title = data.getString(MediaMetadataRetriever.METADATA_KEY_TITLE, null);"
        errorLine2="                                   ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="272"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.MetadataEditor#getString`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.artist = data.getString(MediaMetadataRetriever.METADATA_KEY_ARTIST, null);"
        errorLine2="                                    ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="273"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.MetadataEditor#getString`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.album = data.getString(MediaMetadataRetriever.METADATA_KEY_ALBUM, null);"
        errorLine2="                                   ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="274"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.MetadataEditor#getLong`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.duration = data.getLong(MediaMetadataRetriever.METADATA_KEY_DURATION, -1);"
        errorLine2="                                      ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="275"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.MetadataEditor#getBitmap`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.bitmap = data.getBitmap(MediaMetadataEditor.BITMAP_KEY_ARTWORK, null);"
        errorLine2="                                    ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2KitKat.java"
            line="276"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `new android.media.session.MediaController.Callback`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            new MediaController.Callback() {"
        errorLine2="                                ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="62"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 21 (current min is 16): `android.media.session.MediaController.Callback`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            new MediaController.Callback() {"
        errorLine2="                                ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="62"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.PlaybackState#getState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    updatePlaybackState(state.getState());"
        errorLine2="                                              ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="75"
            column="47"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 21 (current min is 16): `android.media.session.MediaSessionManager.OnActiveSessionsChangedListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            MediaSessionManager.OnActiveSessionsChangedListener {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="83"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPlaybackState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                PlaybackState state = mc.getPlaybackState();"
        errorLine2="                                         ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="129"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.PlaybackState#getState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    switch (state.getState()) {"
        errorLine2="                                  ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="131"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaSessionManager#addOnActiveSessionsChangedListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMediaSessionManager.addOnActiveSessionsChangedListener(mSessionListener, mComponent);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="186"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaSessionManager#removeOnActiveSessionsChangedListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mMediaSessionManager.removeOnActiveSessionsChangedListener(mSessionListener);"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="193"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaSessionManager#getActiveSessions`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        List&lt;MediaController> controllers = mMediaSessionManager.getActiveSessions(mComponent);"
        errorLine2="                                                                 ~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="203"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaSessionManager#removeOnActiveSessionsChangedListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMediaSessionManager.removeOnActiveSessionsChangedListener(mSessionListener);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="219"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#unregisterCallback`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMediaController.unregisterCallback(mCallback);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="229"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPackageName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (DEBUG) Log.d(TAG, &quot;Switching to \&apos;&quot; + controller.getPackageName() + &quot;\&apos; controller.&quot;);"
        errorLine2="                                                             ~~~~~~~~~~~~~~"
        includedVariants="defaultFlavorDebug,releaseFlavorDebug"
        excludedVariants="defaultFlavorRelease,releaseFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="240"
            column="62"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#registerCallback`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mMediaController.registerCallback(mCallback);"
        errorLine2="                         ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="244"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getSessionToken`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mThread.sendTask(new EventUpdateMetadata(mMediaController.getSessionToken()));"
        errorLine2="                                                                  ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="247"
            column="67"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getTransportControls`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        MediaController.TransportControls controls = mMediaController.getTransportControls();"
        errorLine2="                                                                      ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="262"
            column="71"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController.TransportControls#pause`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    controls.pause();"
        errorLine2="                             ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="266"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController.TransportControls#play`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    controls.play();"
        errorLine2="                             ~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="268"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController.TransportControls#stop`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                controls.stop();"
        errorLine2="                         ~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="272"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController.TransportControls#skipToNext`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                controls.skipToNext();"
        errorLine2="                         ~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="275"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController.TransportControls#skipToPrevious`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                controls.skipToPrevious();"
        errorLine2="                         ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="278"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getTransportControls`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mMediaController.getTransportControls().seekTo(position);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="295"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPlaybackState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mMediaController == null || mMediaController.getPlaybackState() == null) {"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="303"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPlaybackState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mMediaController.getPlaybackState().getBufferedPosition();"
        errorLine2="                                ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="308"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.PlaybackState#getBufferedPosition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mMediaController.getPlaybackState().getBufferedPosition();"
        errorLine2="                                                   ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="308"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPlaybackState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        if (mMediaController == null || mMediaController.getPlaybackState() == null) {"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="316"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPlaybackState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mMediaController.getPlaybackState().getPosition();"
        errorLine2="                                ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="321"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.PlaybackState#getPosition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return mMediaController.getPlaybackState().getPosition();"
        errorLine2="                                                   ~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="321"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getString`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                id = data.getString(MediaMetadata.METADATA_KEY_MEDIA_ID);"
        errorLine2="                          ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="353"
            column="27"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getString`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    id = data.getString(MediaMetadata.METADATA_KEY_MEDIA_ID);"
        errorLine2="                              ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="359"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaDescription#getTitle`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.title = data.getDescription().getTitle();"
        errorLine2="                                                    ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="369"
            column="53"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getDescription`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.title = data.getDescription().getTitle();"
        errorLine2="                                   ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="369"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getText`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.artist = data.getText(MediaMetadata.METADATA_KEY_ARTIST);"
        errorLine2="                                    ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="370"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getText`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.album = data.getText(MediaMetadata.METADATA_KEY_ALBUM);"
        errorLine2="                                   ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="371"
            column="36"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getLong`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mMetadata.duration = data.getLong(MediaMetadata.METADATA_KEY_DURATION);"
        errorLine2="                                      ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="372"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getBitmap`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Bitmap artwork = data.getBitmap(MediaMetadata.METADATA_KEY_ART);"
        errorLine2="                                  ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="376"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.MediaMetadata#getBitmap`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                artwork = data.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);"
        errorLine2="                               ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="378"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.PlaybackState#getState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        updatePlaybackState(state == null ? PlaybackState.STATE_NONE : state.getState());"
        errorLine2="                                                                             ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="399"
            column="78"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getSessionToken`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (source != null &amp;&amp; mToken.equals(source.getSessionToken())) {"
        errorLine2="                                                       ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="465"
            column="56"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaSession.Token#equals`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (source != null &amp;&amp; mToken.equals(source.getSessionToken())) {"
        errorLine2="                                         ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="465"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getMetadata`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                final MediaMetadata metadata = source.getMetadata();"
        errorLine2="                                                      ~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="468"
            column="55"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPlaybackState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                final PlaybackState playbackState = source.getPlaybackState();"
        errorLine2="                                                           ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="469"
            column="60"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.media.session.MediaController#getPackageName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        + &quot;The media controller is &quot; + source.getPackageName());"
        errorLine2="                                                              ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/media/MediaController2Lollipop.java"
            line="473"
            column="63"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `new android.service.notification.NotificationListenerService`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="public class MediaService extends NotificationListenerService implements"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="47"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="public class MediaService extends NotificationListenerService implements"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="47"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 19 (current min is 16): `android.media.RemoteController.OnClientUpdateListener`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    private RemoteController.OnClientUpdateListener mExternalListener;"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="61"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.media.RemoteController`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mRemoteController = new RemoteController(this, this);"
        errorLine2="                                    ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="127"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#getSystemService`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);"
        errorLine2="                                           ~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="128"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.AudioManager#registerRemoteController`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mRegistered = mAudioManager.registerRemoteController(mRemoteController);"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="146"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#getResources`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            final int size = getResources().getDimensionPixelSize(R.dimen.media_artwork_size);"
        errorLine2="                             ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="149"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController#setArtworkConfiguration`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mRemoteController.setArtworkConfiguration(size, size);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="150"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.AudioManager#unregisterRemoteController`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mAudioManager.unregisterRemoteController(mRemoteController);"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="162"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.OnClientUpdateListener#onClientChange`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mExternalListener.onClientChange(clearing);"
        errorLine2="                              ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="180"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.OnClientUpdateListener#onClientPlaybackStateUpdate`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mExternalListener.onClientPlaybackStateUpdate(state);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="187"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.OnClientUpdateListener#onClientPlaybackStateUpdate`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mExternalListener.onClientPlaybackStateUpdate(state, stateChangeTimeMs, currentPosMs, speed);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="194"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.OnClientUpdateListener#onClientTransportControlUpdate`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mExternalListener.onClientTransportControlUpdate(transportControlFlags);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="201"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.media.RemoteController.OnClientUpdateListener#onClientMetadataUpdate`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mExternalListener.onClientMetadataUpdate(metadataEditor);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/services/MediaService.java"
            line="208"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.view.ViewGroup#isLaidOut`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (Device.hasKitKatApi() &amp;&amp; vg.isLaidOut() &amp;&amp; getFragment().isAnimatable()) {"
        errorLine2="                                            ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/components/MediaWidget.java"
            line="302"
            column="45"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionManager#beginDelayedTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                TransitionManager.beginDelayedTransition(vg);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/components/MediaWidget.java"
            line="303"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.graphics.drawable.RippleDrawable#setColorFilter`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            rippleDrawable.setColorFilter(color, PorterDuff.Mode.MULTIPLY);"
        errorLine2="                           ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/components/MediaWidget.java"
            line="335"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.view.ViewGroup#isLaidOut`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (Device.hasKitKatApi() &amp;&amp; vg.isLaidOut() &amp;&amp; getFragment().isAnimatable()) {"
        errorLine2="                                                ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/components/MediaWidget.java"
            line="418"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionManager#beginDelayedTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    TransitionManager.beginDelayedTransition(vg);"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/components/MediaWidget.java"
            line="419"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.widget.LinearLayout#isLaidOut`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            if (Device.hasKitKatApi() &amp;&amp; isLaidOut()) {"
        errorLine2="                                         ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/notification/NotificationActions.java"
            line="163"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionManager#beginDelayedTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                TransitionManager.beginDelayedTransition(this);"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/notification/NotificationActions.java"
            line="164"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.widget.TextView#setCompoundDrawablesRelative`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                textView.setCompoundDrawablesRelative(icon, null, null, null);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/notification/NotificationActions.java"
            line="327"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#getApplicationContext`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Context context = service.getApplicationContext();"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationListenerJellyBeanMR2.java"
            line="65"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#getActiveNotifications`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        StatusBarNotification[] an = service.getActiveNotifications();"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationListenerJellyBeanMR2.java"
            line="88"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#getActiveNotifications`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        StatusBarNotification[] an = service.getActiveNotifications();"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationListenerLollipop.java"
            line="42"
            column="46"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#getApplicationContext`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        Context context = service.getApplicationContext();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationListenerLollipop.java"
            line="51"
            column="35"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getId`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return n.isMine() &amp;&amp; sbn != null &amp;&amp; sbn.getId() == App.ID_NOTIFY_TEST;"
        errorLine2="                                                ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationPresenter.java"
            line="750"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getId`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return n.isMine() &amp;&amp; sbn != null &amp;&amp; sbn.getId() == App.ID_NOTIFY_INIT;"
        errorLine2="                                                ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationPresenter.java"
            line="756"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getNotification`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                PendingIntentUtils.sendPendingIntent(sbn.getNotification().deleteIntent);"
        errorLine2="                                                         ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="99"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.service.notification.StatusBarNotification#getKey`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        service.cancelNotification(sbn.getKey());"
        errorLine2="                                                       ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="102"
            column="56"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.service.notification.NotificationListenerService#cancelNotification`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        service.cancelNotification(sbn.getKey());"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="102"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#cancelNotification`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        service.cancelNotification("
        errorLine2="                                ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="104"
            column="33"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getPackageName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                sbn.getPackageName(),"
        errorLine2="                                    ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="105"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getTag`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                sbn.getTag(),"
        errorLine2="                                    ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="106"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getId`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                sbn.getId());"
        errorLine2="                                    ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="107"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.NotificationListenerService#cancelAllNotifications`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    service.cancelAllNotifications();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/NotificationUtils.java"
            line="132"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getId`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                .append(sbn.getId(), sbn2.getId())"
        errorLine2="                            ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/OpenNotificationJellyBeanMR2.java"
            line="77"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 18 (current min is 16): `android.service.notification.StatusBarNotification#getTag`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                .append(sbn.getTag(), sbn2.getTag())"
        errorLine2="                            ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/OpenNotificationJellyBeanMR2.java"
            line="79"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.service.notification.StatusBarNotification#getKey`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                .append(sbn2.getKey(), sbn.getKey())"
        errorLine2="                             ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/OpenNotificationKitKatWatch.java"
            line="50"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 21 (current min is 16): `android.app.Notification#visibility`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return getNotification().visibility;"
        errorLine2="                                 ~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/OpenNotificationLollipop.java"
            line="65"
            column="34"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 21 (current min is 16): `android.app.Notification#color`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        int color = getNotification().color;"
        errorLine2="            ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/OpenNotificationLollipop.java"
            line="70"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 21 (current min is 16): `android.app.Notification#color`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        } else setBrandColor(getNotification().color | 0xFF000000);"
        errorLine2="                                               ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/OpenNotificationLollipop.java"
            line="73"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.app.AppOpsManager#checkOp`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        int result = getAppOpsManager().checkOp(AppOpsManager.OPSTR_GET_USAGE_STATS, uid, packageName);"
        errorLine2="                                        ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/permissions/PermissionUsageStats.java"
            line="68"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.os.PowerManager#isPowerSaveMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                setPowerSaveMode(mPowerManager.isPowerSaveMode());"
        errorLine2="                                                               ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerSaveDetector.java"
            line="138"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.os.PowerManager#isPowerSaveMode`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                setPowerSaveMode(mPowerManager.isPowerSaveMode());"
        errorLine2="                                               ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerSaveDetector.java"
            line="151"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.hardware.display.DisplayManager#getDisplays`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Display[] displays = dm.getDisplays(null);"
        errorLine2="                                    ~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="78"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.view.Display#getFlags`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                final boolean virtual = Operator.bitAnd(d.getFlags(), Display.FLAG_PRESENTATION);"
        errorLine2="                                                          ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="87"
            column="59"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.view.Display#isValid`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (d.isValid() &amp;&amp; !virtual) {"
        errorLine2="                      ~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="88"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.Display#getState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Timber.tag(TAG).i(&quot;Display state=&quot; + display.getState());"
        errorLine2="                                                         ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="110"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.view.Display#getState`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return display.getState() == Display.STATE_ON;"
        errorLine2="                           ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="111"
            column="28"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.os.PowerManager#isInteractive`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                ? pm.isInteractive()"
        errorLine2="                     ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/power/PowerUtils.java"
            line="124"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.widget.ProgressBar#getPaddingEnd`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    ? getPaddingEnd()"
        errorLine2="                      ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/ProgressBar.java"
            line="109"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.app.RemoteInput#getChoices`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        src.getResultKey(), src.getLabel(), src.getChoices(),"
        errorLine2="                                                                ~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/RemoteInputUtils.java"
            line="51"
            column="65"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.app.RemoteInput#getLabel`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        src.getResultKey(), src.getLabel(), src.getChoices(),"
        errorLine2="                                                ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/RemoteInputUtils.java"
            line="51"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.app.RemoteInput#getResultKey`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        src.getResultKey(), src.getLabel(), src.getChoices(),"
        errorLine2="                            ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/RemoteInputUtils.java"
            line="51"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.app.RemoteInput#getAllowFreeFormInput`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        src.getAllowFreeFormInput(), src.getExtras());"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/RemoteInputUtils.java"
            line="52"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 20 (current min is 16): `android.app.RemoteInput#getExtras`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        src.getAllowFreeFormInput(), src.getExtras());"
        errorLine2="                                                         ~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/RemoteInputUtils.java"
            line="52"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.content.res.Resources#getDrawable`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                ? context.getResources().getDrawable(drawableRes, context.getTheme())"
        errorLine2="                                         ~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/ResUtils.java"
            line="78"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 21 (current min is 16): `android.graphics.drawable.RippleDrawable`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="public class RippleDrawable2 extends RippleDrawable {"
        errorLine2="                                     ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/drawables/RippleDrawable2.java"
            line="40"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `new android.graphics.drawable.RippleDrawable`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super(color, content, mask);"
        errorLine2="        ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/drawables/RippleDrawable2.java"
            line="51"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 21 (current min is 16): `android.graphics.drawable.RippleDrawable`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            Method method = RippleDrawable.class.getDeclaredMethod(&quot;getRipplePaint&quot;);"
        errorLine2="                            ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/drawables/RippleDrawable2.java"
            line="74"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.app.usage.UsageStats#getPackageName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            return usageStats != null ? usageStats.getPackageName() : null;"
        errorLine2="                                                   ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/utils/tasks/RunningTasksLollipop.java"
            line="51"
            column="52"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.app.usage.UsageStatsManager#queryUsageStats`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        List&lt;UsageStats> statsList = usm.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,"
        errorLine2="                                         ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/utils/tasks/RunningTasksLollipop.java"
            line="68"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.app.usage.UsageStats#getPackageName`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                if (&quot;com.android.systemui&quot;.equals(usageStats.getPackageName())) {"
        errorLine2="                                                             ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/utils/tasks/RunningTasksLollipop.java"
            line="77"
            column="62"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.app.usage.UsageStats#getLastTimeUsed`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                statsSortedMap.put(usageStats.getLastTimeUsed(), usageStats);"
        errorLine2="                                              ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/utils/tasks/RunningTasksLollipop.java"
            line="81"
            column="47"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 23 (current min is 16): `android.provider.Settings#canDrawOverlays`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        || Settings.canDrawOverlays(context);"
        errorLine2="                                    ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/permissions/RuntimePermissions.java"
            line="46"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 23 (current min is 16): `android.provider.Settings.System#canWrite`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        || Settings.System.canWrite(context);"
        errorLine2="                                           ~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/permissions/RuntimePermissions.java"
            line="49"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `new android.transition.Scene`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            mScene = new Scene(parent, view);"
        errorLine2="                         ~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/compat/SceneCompat.java"
            line="46"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.transition.TransitionManager#beginDelayedTransition`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            TransitionManager.beginDelayedTransition(mContent);"
        errorLine2="                              ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/activities/SettingsActivity.java"
            line="420"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.graphics.drawable.Drawable#setHotspot`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    mHotspotDrawable.setHotspot(x, y);"
        errorLine2="                                     ~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/dreamers/graphics/TouchTracker.java"
            line="114"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.graphics.drawable.Drawable#setHotspot`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mHotspotDrawable.setHotspot(x, y);"
        errorLine2="                         ~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/dreamers/graphics/TouchTracker.java"
            line="159"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.appwidget.AppWidgetHost#startAppWidgetConfigureActivityForResult`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                mAppWidgetHost.startAppWidgetConfigureActivityForResult("
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/activities/settings/WidgetPickerActivity.java"
            line="435"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.provider.Settings.Global#getInt`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return Settings.Global.getInt(cr, ZenConsts.ZEN_MODE, ZEN_MODE_DEFAULT);"
        errorLine2="                               ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/utils/zen/ZenUtils.java"
            line="43"
            column="32"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Attribute `paddingStart` referenced here can result in a crash on some specific devices older than API 17 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android:paddingStart=&quot;@dimen/dashboard_category_title_margin_start&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dashboard_category.xml"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Attribute `paddingStart` referenced here can result in a crash on some specific devices older than API 17 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    android:paddingStart=&quot;@dimen/activity_horizontal_margin&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dialog_donate.xml"
            line="28"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Attribute `paddingStart` referenced here can result in a crash on some specific devices older than API 17 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    android:paddingStart=&quot;@dimen/activity_horizontal_margin&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dialog_message.xml"
            line="32"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Attribute `paddingStart` referenced here can result in a crash on some specific devices older than API 17 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    android:paddingStart=&quot;8dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification_reply_free_form.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Attribute `paddingStart` referenced here can result in a crash on some specific devices older than API 17 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                android:paddingStart=&quot;8dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_score_dialog.xml"
            line="43"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="`android:navigationBarColor` requires API level 21 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:navigationBarColor&quot;>@android:color/transparent&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-v19/themes.xml"
            line="31"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="`android:statusBarColor` requires API level 21 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.

If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:statusBarColor&quot;>@android:color/transparent&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-v19/themes.xml"
            line="32"
            column="15"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            return new SimpleDateFormat(dateFormat);"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/DateView.java"
            line="111"
            column="20"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;);"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/fragments/dialogs/FeedbackDialog.java"
            line="346"
            column="36"/>
    </issue>

    <issue
        id="WrongRegion"
        severity="Warning"
        message="Suspicious language and region combination sr (Serbian) with CS (null): language sr is usually paired with: RS (Serbia), BA (Bosnia &amp; Herzegovina), ME (Montenegro)"
        category="Correctness"
        priority="6"
        summary="Suspicious Language/Region Combination"
        explanation="Android uses the letter codes ISO 639-1 for languages, and the letter codes ISO 3166-1 for the region codes. In many cases, the language code and the country where the language is spoken is the same, but it is also often not the case. For example, while &apos;se&apos; refers to Sweden, where Swedish is spoken, the language code for Swedish is *not* `se` (which refers to the Northern Sami language), the language code is `sv`. And similarly the region code for `sv` is El Salvador.

This lint check looks for suspicious language and region combinations, to help catch cases where you&apos;ve accidentally used the wrong language or region code. Lint knows about the most common regions where a language is spoken, and if a folder combination is not one of these, it is flagged as suspicious.

Note however that it may not be an error: you can theoretically have speakers of any language in any region and want to target that with your resources, so this check is aimed at tracking down likely mistakes, not to enforce a specific set of region and language combinations."
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/raw-sr-rCS"/>
    </issue>

    <issue
        id="WrongRegion"
        severity="Warning"
        message="Suspicious language and region combination sr (Serbian) with CS (null): language sr is usually paired with: RS (Serbia), BA (Bosnia &amp; Herzegovina), ME (Montenegro)"
        category="Correctness"
        priority="6"
        summary="Suspicious Language/Region Combination"
        explanation="Android uses the letter codes ISO 639-1 for languages, and the letter codes ISO 3166-1 for the region codes. In many cases, the language code and the country where the language is spoken is the same, but it is also often not the case. For example, while &apos;se&apos; refers to Sweden, where Swedish is spoken, the language code for Swedish is *not* `se` (which refers to the Northern Sami language), the language code is `sv`. And similarly the region code for `sv` is El Salvador.

This lint check looks for suspicious language and region combinations, to help catch cases where you&apos;ve accidentally used the wrong language or region code. Lint knows about the most common regions where a language is spoken, and if a folder combination is not one of these, it is flagged as suspicious.

Note however that it may not be an error: you can theoretically have speakers of any language in any region and want to target that with your resources, so this check is aimed at tracking down likely mistakes, not to enforce a specific set of region and language combinations."
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-sr-rCS"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="                        holder.icon = (ImageView) view.findViewById(R.id.icon);"
        errorLine2="                                                                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/activities/settings/BlacklistActivity.java"
            line="533"
            column="69"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mAppIcon = (ImageView) view.findViewById(R.id.icon);"
        errorLine2="                                                 ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/BlacklistAppFragment.java"
            line="123"
            column="50"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mAppName = (TextView) view.findViewById(R.id.title);"
        errorLine2="                                                ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/BlacklistAppFragment.java"
            line="124"
            column="49"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            ImageView icon = (ImageView) view.findViewById(R.id.icon);"
        errorLine2="                                                           ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/BlacklistAppFragment.java"
            line="156"
            column="60"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/checkbox` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            final CheckBox checkBox = (CheckBox) view.findViewById(R.id.checkbox);"
        errorLine2="                                                                   ~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/BlacklistAppFragment.java"
            line="164"
            column="68"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/up` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mUpView = findViewById(R.id.up);"
        errorLine2="                               ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/snake/ControllerView.java"
            line="53"
            column="32"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/left` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mLeftView = findViewById(R.id.left);"
        errorLine2="                                 ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/snake/ControllerView.java"
            line="55"
            column="34"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/right` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mRightView = findViewById(R.id.right);"
        errorLine2="                                  ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/snake/ControllerView.java"
            line="56"
            column="35"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mImageView = (ImageView) findViewById(R.id.icon);"
        errorLine2="                                              ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/widgets/DashboardTileView.java"
            line="57"
            column="47"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mTitleTextView = (TextView) findViewById(R.id.title);"
        errorLine2="                                                 ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/widgets/DashboardTileView.java"
            line="58"
            column="50"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@dimen/notification_subtext_size` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        float subtextSize = context.getResources().getDimension(R.dimen.notification_subtext_size);"
        errorLine2="                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/notifications/Extractor.java"
            line="242"
            column="65"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/checkbox` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mAttachLogCheckBox = (CheckBox) view.findViewById(R.id.checkbox);"
        errorLine2="                                                          ~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/fragments/dialogs/FeedbackDialog.java"
            line="179"
            column="59"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/info` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mValueTextView = (TextView) root.findViewById(R.id.info);"
        errorLine2="                                                      ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/preferences/IconSizePreference.java"
            line="84"
            column="55"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            ImageView icon = (ImageView) view.findViewById(R.id.icon);"
        errorLine2="                                                           ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/preferences/IconSizePreference.java"
            line="94"
            column="60"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/checkbox` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mEnabled = (CheckBox) root.findViewById(R.id.checkbox);"
        errorLine2="                                                ~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/preferences/InactiveTimePreference.java"
            line="86"
            column="49"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mNotificationIcon = (NotificationIcon) findViewById(R.id.icon);"
        errorLine2="                                                            ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/notification/NotificationIconWidget.java"
            line="50"
            column="61"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mLargeIcon = (ImageView) findViewById(R.id.icon);"
        errorLine2="                                              ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/notification/NotificationWidget.java"
            line="106"
            column="47"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mTitleTextView = (TextView) findViewById(R.id.title);"
        errorLine2="                                                 ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/widgets/notification/NotificationWidget.java"
            line="108"
            column="50"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            this.icon = (ImageView) view.findViewById(R.id.icon);"
        errorLine2="                                                      ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/adapters/PermissionAdapter.java"
            line="47"
            column="55"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            this.title = (TextView) view.findViewById(R.id.title);"
        errorLine2="                                                      ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/adapters/PermissionAdapter.java"
            line="48"
            column="55"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mTextView = (TextView) findViewById(R.id.title);"
        errorLine2="                                            ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/widgets/SwitchBar.java"
            line="95"
            column="45"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        mIconView = (ImageView) findViewById(R.id.icon);"
        errorLine2="                                             ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/widgets/SwitchBar.java"
            line="96"
            column="46"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            rv.setTextViewText(R.id.title, res.getString("
        errorLine2="                               ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/providers/ToggleWidgetProvider.java"
            line="119"
            column="32"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/time` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/time&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/acdisplay_scene_clock.xml"
            line="30"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/actionBarSize` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_height=&quot;?actionBarSize&quot; />"
        errorLine2="                               ~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/activity_widget_picker.xml"
            line="26"
            column="32"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/actionBarSize` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_marginTop=&quot;?actionBarSize&quot;>"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/activity_widget_picker.xml"
            line="31"
            column="35"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/actionBarSize` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_marginTop=&quot;?actionBarSize&quot;"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/activity_widget_picker.xml"
            line="60"
            column="35"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/icon&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/appwidget_toggle_layout.xml"
            line="30"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/title&quot;"
        errorLine2="                    ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/appwidget_toggle_layout.xml"
            line="37"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/icon&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dashboard_tile.xml"
            line="28"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/icon&quot;"
        errorLine2="                        ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/dashboard_tile.xml"
            line="35"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/icon&quot;"
        errorLine2="                        ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-sw600dp/dashboard_tile.xml"
            line="36"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/title&quot;"
        errorLine2="                        ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-sw600dp/dashboard_tile.xml"
            line="47"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="                android:id=&quot;@+id/title&quot;"
        errorLine2="                            ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/dashboard_tile.xml"
            line="49"
            column="29"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="                android:id=&quot;@+id/title&quot;"
        errorLine2="                            ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dashboard_tile.xml"
            line="50"
            column="29"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="                android:layout_below=&quot;@id/title&quot;"
        errorLine2="                                      ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/dashboard_tile.xml"
            line="63"
            column="39"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="Overriding `@dimen/notification_subtext_size` which is marked as private in com.android.support:appcompat-v7. If deliberate, use tools:override=&quot;true&quot;, otherwise pick a different name."
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;dimen name=&quot;notification_subtext_size&quot;>12sp&lt;/dimen>"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/dimens.xml"
            line="31"
            column="18"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/checkbox` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/checkbox&quot;"
        errorLine2="                    ~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/feedback_dialog.xml"
            line="57"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/icon&quot;"
        errorLine2="                        ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/fragment_blacklist_app_config.xml"
            line="34"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="                android:id=&quot;@+id/title&quot;"
        errorLine2="                            ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/fragment_blacklist_app_config.xml"
            line="55"
            column="29"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/icon&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/item_blah.xml"
            line="32"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/title&quot;"
        errorLine2="                    ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/item_blah.xml"
            line="40"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_below=&quot;@+id/title&quot;"
        errorLine2="                              ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/item_blah.xml"
            line="54"
            column="31"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/actionBarSize` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_marginTop=&quot;?actionBarSize&quot; />"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/main.xml"
            line="27"
            column="35"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/actionBarSize` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_height=&quot;?actionBarSize&quot; />"
        errorLine2="                               ~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/main.xml"
            line="33"
            column="32"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/icon&quot;"
        errorLine2="                        ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="37"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/title&quot;"
        errorLine2="                        ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="45"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:layout_toEndOf=&quot;@id/icon&quot;"
        errorLine2="                                    ~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="51"
            column="37"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:layout_toRightOf=&quot;@id/icon&quot;"
        errorLine2="                                      ~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="52"
            column="39"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:layout_below=&quot;@id/title&quot;"
        errorLine2="                                  ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="64"
            column="35"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:layout_toEndOf=&quot;@id/icon&quot;"
        errorLine2="                                    ~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="67"
            column="37"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:layout_toRightOf=&quot;@id/icon&quot;"
        errorLine2="                                      ~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="68"
            column="39"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:layout_below=&quot;@id/title&quot;"
        errorLine2="                                  ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification.xml"
            line="77"
            column="35"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/icon&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/notification_icon.xml"
            line="27"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/dividerHorizontal` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:drawable=&quot;?dividerHorizontal&quot; />"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-v21/pb_acdisplay_divider.xml"
            line="23"
            column="27"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/icon&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_blacklist_app_config.xml"
            line="32"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/checkbox` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/checkbox&quot;"
        errorLine2="                    ~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_blacklist_app_config.xml"
            line="45"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/checkbox` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/checkbox&quot;"
        errorLine2="                    ~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_dialog_inactive_hours.xml"
            line="27"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/checkbox` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_below=&quot;@id/checkbox&quot;"
        errorLine2="                              ~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_dialog_inactive_hours.xml"
            line="37"
            column="31"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/info` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/info&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_dialog_size.xml"
            line="44"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/info` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_toLeftOf=&quot;@id/info&quot;"
        errorLine2="                                 ~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_dialog_size.xml"
            line="61"
            column="34"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/info` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_toStartOf=&quot;@id/info&quot; />"
        errorLine2="                                  ~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_dialog_size.xml"
            line="62"
            column="35"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:id=&quot;@+id/icon&quot;"
        errorLine2="                    ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_header_item.xml"
            line="32"
            column="21"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/actionBarSize` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_height=&quot;?actionBarSize&quot;"
        errorLine2="                               ~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/preference_list_fragment.xml"
            line="29"
            column="32"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/primary_text_default_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/primary_text_default_material_dark&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/primary_text_material_dark.xml"
            line="16"
            column="78"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@dimen/disabled_alpha_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/primary_text_default_material_dark&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/primary_text_material_dark.xml"
            line="16"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/primary_text_default_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:color=&quot;@color/primary_text_default_material_dark&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/primary_text_material_dark.xml"
            line="17"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/primary_text_default_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_light&quot; android:color=&quot;@color/primary_text_default_material_light&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/primary_text_material_light.xml"
            line="16"
            column="79"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@dimen/disabled_alpha_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_light&quot; android:color=&quot;@color/primary_text_default_material_light&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/primary_text_material_light.xml"
            line="16"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/primary_text_default_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:color=&quot;@color/primary_text_default_material_light&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/primary_text_material_light.xml"
            line="17"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/secondary_text_default_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/secondary_text_default_material_dark&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/ripple_dark.xml"
            line="21"
            column="78"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@dimen/disabled_alpha_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/secondary_text_default_material_dark&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/ripple_dark.xml"
            line="21"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/ripple_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:color=&quot;@color/ripple_material_dark&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/ripple_dark.xml"
            line="22"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/secondary_text_default_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/secondary_text_default_material_light&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/ripple_light.xml"
            line="21"
            column="78"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@dimen/disabled_alpha_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/secondary_text_default_material_light&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/ripple_light.xml"
            line="21"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/ripple_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:color=&quot;@color/ripple_material_light&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/ripple_light.xml"
            line="22"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/secondary_text_default_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/secondary_text_default_material_dark&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/secondary_text_material_dark.xml"
            line="16"
            column="78"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@dimen/disabled_alpha_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_dark&quot; android:color=&quot;@color/secondary_text_default_material_dark&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/secondary_text_material_dark.xml"
            line="16"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/secondary_text_default_material_dark` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:color=&quot;@color/secondary_text_default_material_dark&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/secondary_text_material_dark.xml"
            line="17"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/secondary_text_default_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_light&quot; android:color=&quot;@color/secondary_text_default_material_light&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/secondary_text_material_light.xml"
            line="16"
            column="79"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@dimen/disabled_alpha_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:alpha=&quot;@dimen/disabled_alpha_material_light&quot; android:color=&quot;@color/secondary_text_default_material_light&quot; android:state_enabled=&quot;false&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/secondary_text_material_light.xml"
            line="16"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@color/secondary_text_default_material_light` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="    &lt;item android:color=&quot;@color/secondary_text_default_material_light&quot; />"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/secondary_text_material_light.xml"
            line="17"
            column="26"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/up` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/up&quot;"
        errorLine2="                        ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_fragment.xml"
            line="60"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/left` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/left&quot;"
        errorLine2="                        ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_fragment.xml"
            line="74"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/right` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/right&quot;"
        errorLine2="                        ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_fragment.xml"
            line="81"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@attr/actionBarSize` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="        android:layout_height=&quot;?actionBarSize&quot;"
        errorLine2="                               ~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/widget_switchbar.xml"
            line="30"
            column="32"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/title` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/title&quot;"
        errorLine2="                        ~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/widget_switchbar.xml"
            line="35"
            column="25"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Warning"
        message="The resource `@id/icon` is marked as private in com.android.support:appcompat-v7"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.

To fix this, copy the resource into your own project instead."
        errorLine1="            android:id=&quot;@+id/icon&quot;"
        errorLine2="                        ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/widget_switchbar.xml"
            line="47"
            column="25"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Wrong argument count, format string `about_dialog_message` requires `2` but format call supplies `3`"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="        String src = ResUtils.getString(getResources(), R.string.about_dialog_message, credits, year);"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/fragments/dialogs/AboutDialog.java"
            line="114"
            column="22"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_dialogs.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Wrong argument count, format string `feedback_error_accessing_log` requires `1` but format call supplies `2`"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="            String message = ResUtils.getString(getResources(), R.string.feedback_error_accessing_log, e.getMessage());"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/base/ui/fragments/dialogs/FeedbackDialog.java"
            line="359"
            column="30"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_dialogs.xml"
            line="83"
            column="5"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Wrong argument count, format string `settings_icon_size_summary` requires `1` but format call supplies `2`"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="        String summary = ResUtils.getString(getResources(),"
        errorLine2="                         ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/settings/InterfaceSettings.java"
            line="87"
            column="26"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="111"
            column="5"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Wrong argument count, format string `settings_inactive_hours_enabled` requires `2` but format call supplies `3`"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="            mInactiveHoursPreference.setSummary(ResUtils.getString(getResources(),"
        errorLine2="                                                ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/settings/MoreSettings.java"
            line="139"
            column="49"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="107"
            column="5"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Wrong argument count, format string `settings_timeout_summary` requires `2` but format call supplies `3`"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="        mTimeoutPreference.setSummary(ResUtils.getString(getResources(),"
        errorLine2="                                      ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/settings/MoreSettings.java"
            line="149"
            column="39"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="109"
            column="5"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;camara&quot; is a common misspelling; did you mean &quot;cámara&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="    &lt;item>Iniciar la camara &lt;/item>"
        errorLine2="                     ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-es-rES/arrays.xml"
            line="44"
            column="22"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;camera&quot; is a common misspelling; did you mean &quot;câmera&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="    &lt;item>Iniciar a camera&lt;/item>"
        errorLine2="                    ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-pt-rPT/arrays.xml"
            line="44"
            column="21"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;Andriod&quot; is a common misspelling; did you mean &quot;Android&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="  &lt;string name=&quot;app_description&quot;>AcDisplay az Andriod értesítések kezelésének új módja. Egy minimális, gyönyörű képernyő segítségével megmutatja neked az új értesítéseket, melyeket közvetlenül a zárképernyőről meg is tudsz nyitni. Hogy mi történt mostanában? Egyszerűen vedd ki a zsebedből a telefont az összes elmulasztott értesítés megtekintéséhez, és nézd meg hasonlóan kellemes és minimalista módon.&lt;/string>"
        errorLine2="                                              ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-hu/strings.xml"
            line="22"
            column="47"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;possivel&quot; is a common misspelling; did you mean &quot;possível&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="  &lt;string name=&quot;compat_dialog_item_notification&quot;>Devido ao facto de o AcDisplay usar o serviço de acessibilidade, não é possivel detectar notificações a ser removidas/actualizadas, ou remover notificações a partir da barra de notificações.&lt;/string>"
        errorLine2="                                                                                                                        ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-pt-rPT/strings_dialogs.xml"
            line="55"
            column="121"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;dinamico&quot; is a common misspelling; did you mean &quot;dinâmico&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="  &lt;string name=&quot;settings_dynamic_background_title&quot;>Ecrã dinamico&lt;/string>"
        errorLine2="                                                        ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-pt-rPT/strings_settings.xml"
            line="64"
            column="57"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;Ningun&quot; is a common misspelling; did you mean &quot;Ningún&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="  &lt;string name=&quot;settings_custom_widget_empty_message_acdisplay&quot;>Ningun widget personalizado configurado.&lt;/string>"
        errorLine2="                                                                ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-es-rES/strings_settings.xml"
            line="73"
            column="65"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;ultima&quot; is a common misspelling; did you mean &quot;última&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="  &lt;string name=&quot;settings_lock_on_dismiss_last_notify_title&quot;>Bloquear ao ignorar a ultima notificação&lt;/string>"
        errorLine2="                                                                                  ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-pt-rPT/strings_settings.xml"
            line="104"
            column="83"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;ultima&quot; is a common misspelling; did you mean &quot;última&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="  &lt;string name=&quot;settings_lock_on_dismiss_last_notify_on&quot;>Ecrã desliga-se depois de ignorar a ultima notificação presente.&lt;/string>"
        errorLine2="                                                                                             ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-pt-rPT/strings_settings.xml"
            line="105"
            column="94"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;ultima&quot; is a common misspelling; did you mean &quot;última&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="  &lt;string name=&quot;settings_lock_on_dismiss_last_notify_off&quot;>Ecrã fica ligado depois de ignorar a ultima notificação presente.&lt;/string>"
        errorLine2="                                                                                               ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-pt-rPT/strings_settings.xml"
            line="106"
            column="96"/>
    </issue>

    <issue
        id="PluralsCandidate"
        severity="Warning"
        message="Formatting %d followed by words (&quot;percent&quot;): This should probably be a plural rather than a string"
        category="Correctness:Messages"
        priority="5"
        summary="Potential Plurals"
        explanation="This lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.

For example, rather than something like this:
  &lt;string name=&quot;try_again&quot;>Try again in %d seconds.&lt;/string>
you should be using a plural:
   &lt;plurals name=&quot;try_again&quot;>
        &lt;item quantity=&quot;one&quot;>Try again in %d second&lt;/item>
        &lt;item quantity=&quot;other&quot;>Try again in %d seconds&lt;/item>
    &lt;/plurals>
This will ensure that in other languages the right set of translations are provided for the different quantity classes.

(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="  &lt;string name=&quot;accessibility_battery_level&quot;>Battery &lt;xliff:g id=&quot;number&quot; example=&quot;100&quot;>%d&lt;/xliff:g> percent.&lt;/string>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-en/strings.xml"
            line="68"
            column="3"/>
    </issue>

    <issue
        id="PluralsCandidate"
        severity="Warning"
        message="Formatting %d followed by words (&quot;percent&quot;): This should probably be a plural rather than a string"
        category="Correctness:Messages"
        priority="5"
        summary="Potential Plurals"
        explanation="This lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.

For example, rather than something like this:
  &lt;string name=&quot;try_again&quot;>Try again in %d seconds.&lt;/string>
you should be using a plural:
   &lt;plurals name=&quot;try_again&quot;>
        &lt;item quantity=&quot;one&quot;>Try again in %d second&lt;/item>
        &lt;item quantity=&quot;other&quot;>Try again in %d seconds&lt;/item>
    &lt;/plurals>
This will ensure that in other languages the right set of translations are provided for the different quantity classes.

(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;string name=&quot;accessibility_battery_level&quot;>Battery &lt;xliff:g id=&quot;number&quot; example=&quot;100&quot;>%d&lt;/xliff:g> percent.&lt;/string>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings.xml"
            line="126"
            column="5"/>
    </issue>

    <issue
        id="PluralsCandidate"
        severity="Warning"
        message="Formatting %d followed by words (&quot;characters&quot;): This should probably be a plural rather than a string"
        category="Correctness:Messages"
        priority="5"
        summary="Potential Plurals"
        explanation="This lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.

For example, rather than something like this:
  &lt;string name=&quot;try_again&quot;>Try again in %d seconds.&lt;/string>
you should be using a plural:
   &lt;plurals name=&quot;try_again&quot;>
        &lt;item quantity=&quot;one&quot;>Try again in %d second&lt;/item>
        &lt;item quantity=&quot;other&quot;>Try again in %d seconds&lt;/item>
    &lt;/plurals>
This will ensure that in other languages the right set of translations are provided for the different quantity classes.

(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="  &lt;string name=&quot;feedback_error_msg_too_short&quot;>Message must contain at least %1$d characters.&lt;/string>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-en/strings_dialogs.xml"
            line="52"
            column="3"/>
    </issue>

    <issue
        id="PluralsCandidate"
        severity="Warning"
        message="Formatting %d followed by words (&quot;characters&quot;): This should probably be a plural rather than a string"
        category="Correctness:Messages"
        priority="5"
        summary="Potential Plurals"
        explanation="This lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.

For example, rather than something like this:
  &lt;string name=&quot;try_again&quot;>Try again in %d seconds.&lt;/string>
you should be using a plural:
   &lt;plurals name=&quot;try_again&quot;>
        &lt;item quantity=&quot;one&quot;>Try again in %d second&lt;/item>
        &lt;item quantity=&quot;other&quot;>Try again in %d seconds&lt;/item>
    &lt;/plurals>
This will ensure that in other languages the right set of translations are provided for the different quantity classes.

(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;string name=&quot;feedback_error_msg_too_short&quot;>Message must contain at least %1$d characters.&lt;/string>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_dialogs.xml"
            line="101"
            column="5"/>
    </issue>

    <issue
        id="WrongConstant"
        severity="Error"
        message="Must be one of: Context.POWER_SERVICE, Context.WINDOW_SERVICE, Context.LAYOUT_INFLATER_SERVICE, Context.ACCOUNT_SERVICE, Context.ACTIVITY_SERVICE, Context.ALARM_SERVICE, Context.NOTIFICATION_SERVICE, Context.ACCESSIBILITY_SERVICE, Context.CAPTIONING_SERVICE, Context.KEYGUARD_SERVICE, Context.LOCATION_SERVICE, Context.SEARCH_SERVICE, Context.SENSOR_SERVICE, Context.STORAGE_SERVICE, Context.WALLPAPER_SERVICE, Context.VIBRATOR_SERVICE, Context.CONNECTIVITY_SERVICE, Context.NETWORK_STATS_SERVICE, Context.WIFI_SERVICE, Context.WIFI_P2P_SERVICE, Context.NSD_SERVICE, Context.AUDIO_SERVICE, Context.FINGERPRINT_SERVICE, Context.MEDIA_ROUTER_SERVICE, Context.TELEPHONY_SERVICE, Context.TELEPHONY_SUBSCRIPTION_SERVICE, Context.CARRIER_CONFIG_SERVICE, Context.TELECOM_SERVICE, Context.CLIPBOARD_SERVICE, Context.INPUT_METHOD_SERVICE, Context.TEXT_SERVICES_MANAGER_SERVICE, Context.APPWIDGET_SERVICE, Context.DROPBOX_SERVICE, Context.DEVICE_POLICY_SERVICE, Context.UI_MODE_SERVICE, Context.DOWNLOAD_SERVICE, Context.NFC_SERVICE, Context.BLUETOOTH_SERVICE, Context.USB_SERVICE, Context.LAUNCHER_APPS_SERVICE, Context.INPUT_SERVICE, Context.DISPLAY_SERVICE, Context.USER_SERVICE, Context.RESTRICTIONS_SERVICE, Context.APP_OPS_SERVICE, Context.CAMERA_SERVICE, Context.PRINT_SERVICE, Context.CONSUMER_IR_SERVICE, Context.TV_INPUT_SERVICE, Context.USAGE_STATS_SERVICE, Context.MEDIA_SESSION_SERVICE, Context.BATTERY_SERVICE, Context.JOB_SCHEDULER_SERVICE, Context.MEDIA_PROJECTION_SERVICE, Context.MIDI_SERVICE, Context.HARDWARE_PROPERTIES_SERVICE"
        category="Security"
        priority="6"
        summary="Incorrect constant"
        explanation="Ensures that when parameter in a method only allows a specific set of constants, calls obey those rules."
        errorLine1="        UsageStatsManager usm = (UsageStatsManager) context.getSystemService(USAGE_STATS_MANAGER);"
        errorLine2="                                                                             ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/utils/tasks/RunningTasksLollipop.java"
            line="63"
            column="78"/>
    </issue>

    <issue
        id="AllowBackup"
        severity="Warning"
        message="Should explicitly set `android:fullBackupContent` to `true` or `false` to opt-in to or out of full app data back-up and restore, or alternatively to an `@xml` resource which specifies which files to backup"
        category="Security"
        priority="3"
        summary="Missing `allowBackup` attribute"
        explanation="The allowBackup attribute determines if an application&apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup

By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.

This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.

Setting `allowBackup=&quot;false&quot;` opts an application out of both backup and restore.

To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&quot;`"
        url="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        urls="http://developer.android.com/reference/android/R.attr.html#allowBackup"
        errorLine1="    &lt;application"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/AndroidManifest.xml"
            line="56"
            column="5"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (new android.os.Handler(){})"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private final Handler mHandler = new Handler() {"
        errorLine2="                                                   ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/snake/Logic.java"
            line="66"
            column="52"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (new android.os.Handler(){})"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private Handler mHandler = new Handler() {"
        errorLine2="                                             ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/PocketFragment.java"
            line="60"
            column="46"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (new android.os.Handler(){})"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private final Handler mHandler = new Handler() {"
        errorLine2="                                                   ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/Timeout.java"
            line="48"
            column="52"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.primary_color_600` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;primary_color_600&quot;>#546e7a&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="44"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.primary_color_900` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;primary_color_900&quot;>#263238&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="45"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.material_dark_primary_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;material_dark_primary_text&quot;>#DDFFFFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="49"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.material_dark_secondary_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;material_dark_secondary_text&quot;>#89FFFFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="50"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.material_dark_hint_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;material_dark_hint_text&quot;>#42FFFFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="51"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.material_light_primary_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;material_light_primary_text&quot;>#DD000000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="52"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.material_light_secondary_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;material_light_secondary_text&quot;>#89000000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="53"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.material_light_hint_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;color name=&quot;material_light_hint_text&quot;>#42000000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/colors.xml"
            line="54"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.integer.config_maxPendingFinishDelayMillis` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;integer name=&quot;config_maxPendingFinishDelayMillis&quot;>1000&lt;/integer>"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/config.xml"
            line="28"
            column="14"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.transparent` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;drawable name=&quot;transparent&quot;>@null&lt;/drawable>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/drawables.xml"
            line="28"
            column="15"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.ic_dialog_inactive_time_white` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-hdpi/ic_dialog_inactive_time_white.png"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-mdpi/ic_dialog_inactive_time_white.png"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-xhdpi/ic_dialog_inactive_time_white.png"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-xxhdpi/ic_dialog_inactive_time_white.png"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-xxxhdpi/ic_dialog_inactive_time_white.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.primary_text_material_light` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/primary_text_material_light.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.secondary_text_material_light` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/color/secondary_text_material_light.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.snake_score_dialog` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_score_dialog.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.settings_unknown_value` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;settings_unknown_value&quot;>Unknown value&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_settings.xml"
            line="25"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.settings_placeholder_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;settings_placeholder_title&quot;>Placeholder&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_settings.xml"
            line="28"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="28"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.settings_placeholder_summary` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;settings_placeholder_summary&quot;>A place for future options.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_settings.xml"
            line="29"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="29"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.settings_security_category` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;settings_security_category&quot;>Security&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_settings.xml"
            line="51"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="50"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.settings_security_disclaimer` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;settings_security_disclaimer&quot;>Warning! Those options are designed to prevent accidental unlocks only. Read help for more info…&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_settings.xml"
            line="52"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="51"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.settings_advanced_category` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;settings_advanced_category&quot;>Advanced&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_settings.xml"
            line="61"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_settings.xml"
            line="61"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.snake_app_name` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;snake_app_name&quot;>Snake&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_snake.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_snake.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.snake_score_best` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;snake_score_best&quot;>Best score&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_snake.xml"
            line="23"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_snake.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.snake_score_best_new` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;snake_score_best_new&quot;>New record&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values/strings_snake.xml"
            line="24"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/values-ru/strings_snake.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Ellipsis string can be replaced with ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="  &lt;string name=&quot;settings_more_title&quot;>Повече...&lt;/string>"
        errorLine2="                                     ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-bg/strings_settings.xml"
            line="34"
            column="38"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Ellipsis string can be replaced with ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="  &lt;string name=&quot;settings_security_disclaimer&quot;>¡ ADVERTENCIA! Estas opciones están diseñadas para prevenir accidentales desbloqueos solos. Leer la ayuda para obtener más información...&lt;/string>"
        errorLine2="                                              ^"
        includedVariants="releaseFlavorDebug,releaseFlavorRelease"
        excludedVariants="defaultFlavorDebug,defaultFlavorRelease"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/releaseFlavor/res/values-es-rES/strings_settings.xml"
            line="45"
            column="47"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Action Bar icons should use a single gray color (`#333333` for light themes (with 60%/30% opacity for enabled/disabled), and `#FFFFFF` with opacity 80%/30% for dark themes"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-hdpi/ic_action_warning_amber.png"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-hdpi`: bg_dashboard_category_compat_dark.9.png, bg_window_overlay_dark.9.png, ic_media_skip_next_white.png"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-hdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-mdpi`: bg_dashboard_category_compat_dark.9.png, bg_window_overlay_dark.9.png, ic_media_skip_next_white.png"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-mdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-xhdpi`: ic_media_skip_next_white.png (found in drawable-xxxhdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-xhdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-xxhdpi`: ic_media_skip_next_white.png (found in drawable-xxxhdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-xxhdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-xxxhdpi`: emo_im_angel.png, emo_im_cool.png, emo_im_crying.png, emo_im_embarrassed.png, emo_im_foot_in_mouth.png... (23 more)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-xxxhdpi"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: ic_corner_unlock_white.png, ic_settings_keyguard_white.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-hdpi/ic_settings_keyguard_white.png"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/drawable-hdpi/ic_corner_unlock_white.png"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/achep/acdisplay/ui/fragments/AcDisplayFragment#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="592"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/achep/acdisplay/ui/fragments/AcDisplayFragment$TouchForwarder#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                       ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java"
            line="1468"
            column="24"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/achep/acdisplay/ui/view/ForwardingListener#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/acdisplay/ui/view/ForwardingListener.java"
            line="99"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `com/achep/snake/GameView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(@NonNull MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/java/com/achep/snake/GameView.java"
            line="74"
            column="20"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dashboard_tile.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/dashboard_tile.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageButton"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_fragment.xml"
            line="59"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageButton"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_fragment.xml"
            line="66"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageButton"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_fragment.xml"
            line="73"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageButton"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_fragment.xml"
            line="80"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_score_dialog.xml"
            line="47"
            column="13"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you must *also* specify `gravity` or `layout_gravity=&quot;start&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:textAlignment=&quot;viewStart&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dashboard_category.xml"
            line="42"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingLeft=&quot;@dimen/dashboard_category_title_margin_start&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dashboard_category.xml"
            line="40"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingStart=&quot;@dimen/dashboard_category_title_margin_start&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/dashboard_category.xml"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_gravity=&quot;bottom|end|right&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout-land/activity_widget_picker.xml"
            line="69"
            column="33"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.

For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.

(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_gravity=&quot;end|right&quot;"
        errorLine2="                                        ~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/com.achep.acdisplay/project/app/src/main/res/layout/snake_score_dialog.xml"
            line="51"
            column="41"/>
    </issue>

</issues>
