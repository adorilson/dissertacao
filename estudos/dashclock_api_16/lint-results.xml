<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 25.1.7">

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                sp.edit().putStringSet(CalendarExtension.PREF_SELECTED_CALENDARS,"
        errorLine2="                ^"
        quickfix="studio">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/calendar/CalendarSelectionPreference.java"
            line="86"
            column="17"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        sp.commit();"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/configuration/ConfigureAppearanceFragment.java"
            line="127"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        sp.edit().putLong(STATE_WEATHER_LAST_UPDATE_ELAPSED_MILLIS,"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/weather/WeatherExtension.java"
            line="498"
            column="9"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 21 (current min is 16): `android.app.AlarmManager#ACTION_NEXT_ALARM_CLOCK_CHANGED`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and device whether it&apos;s safe and can be suppressed or whether the code needs tbe guarded.

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.
"
        errorLine1="            filter.addAction(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED);"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/nextalarm/NextAlarmExtension.java"
            line="65"
            column="30"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `AnalogClock`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;AnalogClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog1_black.xml"
            line="21"
            column="18"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `AnalogClock`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;AnalogClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog1_white.xml"
            line="21"
            column="18"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `AnalogClock`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;AnalogClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog2_black.xml"
            line="21"
            column="18"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `AnalogClock`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="    &lt;AnalogClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog2_white.xml"
            line="21"
            column="18"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.app.Fragment#getChildFragmentManager`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            getChildFragmentManager().beginTransaction()"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/configuration/ConfigureAppearanceFragment.java"
            line="95"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.preference.PreferenceFragment#getParentFragment`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        ((ConfigureAppearanceFragment) getParentFragment()).setAppearanceContainerTranslationY(top - topPadding);"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/configuration/ConfigureAppearanceMoreFragment.java"
            line="119"
            column="40"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `new android.service.dreams.DreamService`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="public class DaydreamService extends DreamService implements"
        errorLine2="                                     ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="61"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Class requires API level 17 (current min is 16): `android.service.dreams.DreamService`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="public class DaydreamService extends DreamService implements"
        errorLine2="                                     ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="61"
            column="38"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#onAttachedToWindow`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onAttachedToWindow();"
        errorLine2="              ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="99"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#setInteractive`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        setInteractive(true);"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="107"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#setFullscreen`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        setFullscreen(true);"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="108"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#setScreenBright`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        setScreenBright(!sp.getBoolean(PREF_DAYDREAM_NIGHT_MODE, true));"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="126"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#onDetachedFromWindow`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onDetachedFromWindow();"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="134"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#onConfigurationChanged`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        super.onConfigurationChanged(newConfig);"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="143"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#setContentView`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        setContentView(R.layout.daydream);"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="163"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#setFullscreen`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            setFullscreen(true);"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="179"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#getResources`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        final Resources res = getResources();"
        errorLine2="                              ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="182"
            column="31"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#findViewById`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mDaydreamContainer = (ViewGroup) findViewById(R.id.daydream_container);"
        errorLine2="                                         ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="184"
            column="42"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#findViewById`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                findViewById(R.id.daydream_root);"
        errorLine2="                ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="186"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#setFullscreen`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                setFullscreen(false);"
        errorLine2="                ~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="194"
            column="17"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#findViewById`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        mExtensionsContainer = (ViewGroup) findViewById(R.id.extensions_container);"
        errorLine2="                                           ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="245"
            column="44"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#findViewById`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        ExposedScrollView scrollView = (ExposedScrollView) findViewById(R.id.extensions_scroller);"
        errorLine2="                                                           ~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="282"
            column="60"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.service.dreams.DreamService#finish`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        finish();"
        errorLine2="        ~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DaydreamService.java"
            line="366"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.view.View#getLayoutDirection`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        switch (Gravity.getAbsoluteGravity(mGravity, getLayoutDirection())"
        errorLine2="                                                     ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/ui/DragGripView.java"
            line="94"
            column="54"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `android.app.Activity#setTaskDescription`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        activity.setTaskDescription(new ActivityManager.TaskDescription(label, sIcon, tv.data));"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/RecentTasksStyler.java"
            line="58"
            column="18"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 21 (current min is 16): `new android.app.ActivityManager.TaskDescription`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        activity.setTaskDescription(new ActivityManager.TaskDescription(label, sIcon, tv.data));"
        errorLine2="                                                        ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/RecentTasksStyler.java"
            line="58"
            column="57"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.widget.TextClock#setFormat12Hour`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            ((TextClock) mRootView.findViewById(viewId)).setFormat12Hour(format);"
        errorLine2="                                                         ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/render/SimpleViewBuilder.java"
            line="128"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.widget.TextClock#setFormat24Hour`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            ((TextClock) mRootView.findViewById(viewId)).setFormat24Hour(format);"
        errorLine2="                                                         ~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/render/SimpleViewBuilder.java"
            line="129"
            column="58"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 19 (current min is 16): `android.provider.Telephony.Sms#getDefaultSmsPackage`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            String smsPackage = Telephony.Sms.getDefaultSmsPackage(this);"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/phone/SmsExtension.java"
            line="195"
            column="47"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.os.SystemClock#elapsedRealtimeNanos`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        if (lastLocation == null || (SystemClock.elapsedRealtimeNanos()"
        errorLine2="                                                                 ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/weather/WeatherExtension.java"
            line="252"
            column="66"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.location.Location#getElapsedRealtimeNanos`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                                - lastLocation.getElapsedRealtimeNanos()) >= STALE_LOCATION_NANOS) {"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/weather/WeatherExtension.java"
            line="253"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.location.Location#getElapsedRealtimeNanos`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                (SystemClock.elapsedRealtimeNanos() - lastLocation.getElapsedRealtimeNanos())"
        errorLine2="                                                                   ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/weather/WeatherExtension.java"
            line="322"
            column="68"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 17 (current min is 16): `android.os.SystemClock#elapsedRealtimeNanos`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                (SystemClock.elapsedRealtimeNanos() - lastLocation.getElapsedRealtimeNanos())"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/weather/WeatherExtension.java"
            line="322"
            column="30"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Attribute `paddingStart` referenced here can result in a crash on some specific devices older than API 17 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        android:paddingStart=&quot;8dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Attribute `paddingStart` referenced here can result in a crash on some specific devices older than API 17 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    android:paddingStart=&quot;16dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/preference_category.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="`android:windowElevation` requires API level 21 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:windowElevation&quot;>16dp&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sw600dp/styles.xml"
            line="25"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="`android:elevation` requires API level 21 (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        &lt;item name=&quot;android:elevation&quot;>2dp&lt;/item>"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/styles.xml"
            line="206"
            column="15"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="&lt;TextClock"
        errorLine2="^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_condensed_bold.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    &lt;TextClock"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    &lt;TextClock"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="30"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    &lt;TextClock"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="40"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="&lt;TextClock"
        errorLine2="^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_simple.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    &lt;TextClock"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_alpha.xml"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    &lt;TextClock"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_alpha.xml"
            line="30"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="&lt;TextClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_big_small.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="&lt;TextClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_condensed.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="&lt;TextClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_default.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="&lt;TextClock xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_light.xml"
            line="17"
            column="1"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    &lt;TextClock"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_stock.xml"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="View requires API level 17 (current min is 16): `&lt;TextClock>`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-vNN` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    &lt;TextClock"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_stock.xml"
            line="31"
            column="5"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                untilString = new SimpleDateFormat(&quot;E&quot;).format(nextEventCalendar.getTime());"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/calendar/CalendarExtension.java"
            line="228"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                untilString = new SimpleDateFormat(&quot;E&quot;).format(nextEventCalendar.getTime());"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/calendar/CalendarExtension.java"
            line="243"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="            expandedTime = new SimpleDateFormat(expandedTimeFormat.toString())"
        errorLine2="                               ~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/calendar/CalendarExtension.java"
            line="282"
            column="32"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyyMMdd_HHmm&quot;);"
        errorLine2="                ~~~~~~~~~~~~~~~~"
        includedVariants="debug,publicDebug"
        excludedVariants="publicBeta,release">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/LogUtils.java"
            line="166"
            column="17"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `elevation` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:elevation=&quot;8dp&quot;>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/activity_configure.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `elevation` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:elevation=&quot;8dp&quot;>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/activity_extension_configuration_simple.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `elevation` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:elevation=&quot;4dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/dialog_app_chooser.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `elevation` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:elevation=&quot;4dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/dialog_weather_location_chooser.xml"
            line="24"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `elevation` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:elevation=&quot;4dp&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_appearance_more.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `elevation` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:elevation=&quot;4dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_appearance_more.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `stateListAnimator` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:stateListAnimator=&quot;@anim/fab_state_list_anim&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_extensions.xml"
            line="71"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `elevation` is only used in API level 21 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:elevation=&quot;@dimen/fab_elevation&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_extensions.xml"
            line="79"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format12Hour=&quot;@string/simple_date_format&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_condensed_bold.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format24Hour=&quot;@string/simple_date_format&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_condensed_bold.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format12Hour=&quot;E&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format24Hour=&quot;E&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format12Hour=&quot;dd&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format24Hour=&quot;dd&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="36"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format12Hour=&quot;MMM&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="44"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format24Hour=&quot;MMM&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"
            line="45"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format12Hour=&quot;@string/simple_date_format&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_simple.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format24Hour=&quot;@string/simple_date_format&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_simple.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format12Hour=&quot;h&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_alpha.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format24Hour=&quot;kk&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_alpha.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format12Hour=&quot;mm&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_alpha.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format24Hour=&quot;mm&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_alpha.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format12Hour=&quot;h:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_big_small.xml"
            line="20"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format24Hour=&quot;kk:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_big_small.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format12Hour=&quot;h:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_condensed.xml"
            line="20"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format24Hour=&quot;kk:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_condensed.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format12Hour=&quot;h:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_default.xml"
            line="20"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format24Hour=&quot;kk:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_default.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format12Hour=&quot;h:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_light.xml"
            line="20"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:format24Hour=&quot;kk:mm&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_light.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format12Hour=&quot;h&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_stock.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format24Hour=&quot;kk&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_stock.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format12Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format12Hour=&quot;:mm&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_stock.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `format24Hour` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:format24Hour=&quot;:mm&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_stock.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `widgetCategory` is only used in API level 17 and higher (current min is 16)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:widgetCategory=&quot;keyguard|home_screen&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/xml/widget_info.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            View rootView = layoutInflater.inflate(R.layout.dialog_app_chooser, null);"
        errorLine2="                                                                                ~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/configuration/AppChooserPreference.java"
            line="215"
            column="81"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            View rootView = layoutInflater.inflate(R.layout.dialog_colors, null);"
        errorLine2="                                                                           ~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/configuration/ColorPreference.java"
            line="180"
            column="76"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            View rootView = layoutInflater.inflate(R.layout.dialog_about, null);"
        errorLine2="                                                                          ~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/HelpUtils.java"
            line="80"
            column="75"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            View rootView = layoutInflater.inflate(R.layout.dialog_weather_location_chooser, null);"
        errorLine2="                                                                                             ~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/weather/WeatherLocationPreference.java"
            line="180"
            column="94"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `versionCode` value (`1`) is not used; it is always overridden by the value specified in the Gradle build script (`32`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="    android:versionCode=&quot;1&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/AndroidManifest.xml"
            line="19"
            column="5"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `versionName` value (`See version.properties`) is not used; it is always overridden by the value specified in the Gradle build script (`1.7`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="    android:versionName=&quot;See version.properties&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/AndroidManifest.xml"
            line="20"
            column="5"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="This dimension is used as a text size: Should use &quot;`sp`&quot; instead of &quot;`dp`&quot;"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="    &lt;dimen name=&quot;clock_text_size_small&quot;>56dp&lt;/dimen>"
        errorLine2="                                        ^"
        quickfix="studio">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sw600dp/clock_metrics.xml"
            line="22"
            column="41"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_big_small.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="This dimension is used as a text size: Should use &quot;`sp`&quot; instead of &quot;`dp`&quot;"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="    &lt;dimen name=&quot;clock_text_size_small&quot;>48dp&lt;/dimen>"
        errorLine2="                                        ^"
        quickfix="studio">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sw360dp/clock_metrics.xml"
            line="23"
            column="41"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_big_small.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="This dimension is used as a text size: Should use &quot;`sp`&quot; instead of &quot;`dp`&quot;"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="    &lt;dimen name=&quot;clock_text_size_small&quot;>42dp&lt;/dimen>"
        errorLine2="                                        ^"
        quickfix="studio">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/clock_metrics.xml"
            line="24"
            column="41"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_big_small.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Inconsistent formatting types for argument #1 in format string `extensions_removed_template` (&apos;%1%&apos;): Found both &apos;`d`&apos; and &apos;`%`&apos; (in values/strings.xml)"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="    &lt;string name=&quot;extensions_removed_template&quot;>Počet odstránených rozšírení: %1%d.&lt;/string>"
        errorLine2="                                                                             ~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="44"
            column="78"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Inconsistent formatting types for argument #1 in format string `extensions_removed_template` (&apos;%1%&apos;): Found both &apos;`d`&apos; and &apos;`%`&apos; (in values/strings.xml)"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="    &lt;string name=&quot;extensions_removed_template&quot;>%1%d estensioni rimosse.&lt;/string>"
        errorLine2="                                               ~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="45"
            column="48"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="StringFormatMatches"
        severity="Error"
        message="Inconsistent formatting types for argument #1 in format string `extensions_removed_template` (&apos;%1%&apos;): Found both &apos;`d`&apos; and &apos;`%`&apos; (in values/strings.xml)"
        category="Correctness:Messages"
        priority="9"
        summary="`String.format` string doesn&apos;t match the XML format string"
        explanation="This lint check ensures the following:
(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments
(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string."
        errorLine1="    &lt;string name=&quot;extensions_removed_template&quot;>%1%d rozszerzeń usuniętych.&lt;/string>"
        errorLine2="                                               ~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="46"
            column="48"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_gmail_accounts_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/pref_strings.xml"
            line="42"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_gmail_accounts_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/pref_strings.xml"
            line="42"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_gmail_accounts_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/pref_strings.xml"
            line="50"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;de&quot; (German) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_calendar_selected_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/pref_strings.xml"
            line="58"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_calendar_selected_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/pref_strings.xml"
            line="58"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_calendar_selected_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/pref_strings.xml"
            line="58"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;cs&quot; (Czech) the following quantities should also be defined: `few`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_calendar_selected_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/pref_strings.xml"
            line="59"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_calendar_selected_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/pref_strings.xml"
            line="66"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;hu&quot; (Hungarian) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="92"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;nl&quot; (Dutch) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="92"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;el&quot; (Greek) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="93"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pt&quot; (Portuguese) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="93"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `few`, `many`, `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="93"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;de&quot; (German) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="94"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;es&quot; (Spanish) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="94"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`, `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="94"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`, `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;gmail_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="98"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_days&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="110"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_days&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="111"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pt&quot; (Portuguese) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="115"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="115"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="115"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_days&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="116"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;hu&quot; (Hungarian) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="117"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;nl&quot; (Dutch) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="117"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;cs&quot; (Czech) the following quantities should also be defined: `few`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="118"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;el&quot; (Greek) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="118"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pt&quot; (Portuguese) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="119"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`, `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="119"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;es&quot; (Spanish) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="120"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="120"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `few`, `many`, `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="120"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="121"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`, `one`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_mins&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="124"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;missed_calls_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="130"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;missed_calls_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="131"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;missed_calls_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="135"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;uk&quot; (Ukrainian) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;sms_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="142"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;ru&quot; (Russian) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;sms_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="144"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;pl&quot; (Polish) the following quantities should also be defined: `few`, `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.

This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.

For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;sms_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="147"
            column="5"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`font_fontFamily_medium`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;font_fontFamily_medium&quot;>sans-serif&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/fonts.xml"
            line="19"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-v21/fonts.xml"
            line="19"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_background_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_background_title&quot;>Background&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_foreground_color_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_foreground_color_title&quot;>Foreground color&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_homescreen_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_homescreen_title&quot;>Home screen widget&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_lockscreen_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_lockscreen_title&quot;>Lock screen widget&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_background_opacity_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_background_opacity_title&quot;>Background visibility&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_background_opacity_display_names`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;pref_background_opacity_display_names&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="25"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_foreground_color_description`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_foreground_color_description&quot;>The color of text and icons&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_settings_button_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_settings_button_title&quot;>Settings button&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="42"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_settings_button_display_names`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;pref_settings_button_display_names&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="43"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_hide_clock_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_hide_clock_title&quot;>Hide clock&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_hide_clock_description`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_hide_clock_description&quot;>Hide the clock and only show extensions&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="54"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_weather_location_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_weather_location_title&quot;>Location&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="70"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_weather_location_query_hint`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_weather_location_query_hint&quot;>Find a location&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="71"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_weather_location_automatic`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_weather_location_automatic&quot;>Automatic&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="72"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_weather_location_automatic_description`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_weather_location_automatic_description&quot;>Based on your current location.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="73"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_daydream_color_title`&quot; is not translated in &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_daydream_color_title&quot;>Foreground color&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="121"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_daydream_color_description`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_daydream_color_description&quot;>The color of text and icons in Daydream mode&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="122"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_daydream_night_mode_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_daydream_night_mode_title&quot;>Night mode&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="123"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_daydream_night_mode_description`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_daydream_night_mode_description&quot;>Very dim display (for dark rooms)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="124"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_daydream_animation_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_daydream_animation_title&quot;>Animation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="125"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_daydream_animation_display_names`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;pref_daydream_animation_display_names&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="126"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_daydream_system_settings_title`&quot; is not translated in &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_daydream_system_settings_title&quot;>System Daydream settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="138"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_force_world_readable_title`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_force_world_readable_title&quot;>Allow other apps to see all extensions&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="141"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pref_force_world_readable_description`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pref_force_world_readable_description&quot;>Allow other apps to see information from all extensions, including your calendar, contacts, etc.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="142"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`force_world_readable_dialog_description`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;force_world_readable_dialog_description&quot;>Another app is requesting the ability to see information from all your DashClock extensions, including private ones such as calendar, contacts, etc. Do you want to &lt;b>allow this for all apps&lt;/b>?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="144"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`force_world_readable_dialog_no`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;force_world_readable_dialog_no&quot;>Cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="146"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`force_world_readable_dialog_yes`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;force_world_readable_dialog_yes&quot;>Allow for all apps&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/pref_strings.xml"
            line="147"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`simple_date_format`&quot; is not translated in &quot;sk&quot; (Slovak)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;simple_date_format&quot;>E, MMM dd&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`section_daydream`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;section_daydream&quot;>Daydream&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`remove`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;remove&quot;>Remove&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="44"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`undo`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;undo&quot;>Undo&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="46"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`extension_removed_template`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;extension_removed_template&quot;>\&apos;%1$s\&apos; removed.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="47"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`extensions_removed_template`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;extensions_removed_template&quot;>%1$d extensions removed.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="48"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_next_alarm_settings`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_next_alarm_settings&quot;>Next Alarm Extension Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="115"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`now`&quot; is not translated in &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;now&quot;>Now&lt;/string>"
        errorLine2="            ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="137"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`missed_calls_unknown`&quot; is not translated in &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;fr&quot; (French), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;missed_calls_unknown&quot;>Unknown&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="149"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sms_body_all_participants_template`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;nl&quot; (Dutch), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sms_body_all_participants_template&quot;>With: %1$s&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="161"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`permission_desc_bind_data_consumer`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;permission_desc_bind_data_consumer&quot;>Allows an app to consume the data published by DashClock extensions&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="175"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`permission_label_bind_data_consumer`&quot; is not translated in &quot;cs&quot; (Czech), &quot;de&quot; (German), &quot;el-rGR&quot; (Greek: Greece), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt-rBR&quot; (Portuguese: Brazil), &quot;ru&quot; (Russian), &quot;sk&quot; (Slovak), &quot;uk&quot; (Ukrainian), &quot;zh-rCN&quot; (Chinese: China), &quot;zh-rTW&quot; (Chinese: Taiwan, Province of China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;permission_label_bind_data_consumer&quot;>Request consume DashClock extension data&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="176"
            column="13"/>
    </issue>

    <issue
        id="ExtraTranslation"
        severity="Fatal"
        message="&quot;`pref_homescreen_background_opacity_title`&quot; is translated here but not found in default locale"
        category="Correctness:Messages"
        priority="6"
        summary="Extra translation"
        explanation="If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It&apos;s technically possible that your application is only intended to run in a specific locale, but it&apos;s still a good idea to provide a fallback.).

Note that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it&apos;s important to clean them up."
        errorLine1="    &lt;string name=&quot;pref_homescreen_background_opacity_title&quot;>Tło widżetu na ekranie głównym&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/pref_strings.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="ExtraTranslation"
        severity="Fatal"
        message="&quot;`pref_homescreen_background_opacity_display_names`&quot; is translated here but not found in default locale"
        category="Correctness:Messages"
        priority="6"
        summary="Extra translation"
        explanation="If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It&apos;s technically possible that your application is only intended to run in a specific locale, but it&apos;s still a good idea to provide a fallback.).

Note that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it&apos;s important to clean them up."
        errorLine1="    &lt;string-array name=&quot;pref_homescreen_background_opacity_display_names&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/pref_strings.xml"
            line="21"
            column="19"/>
    </issue>

    <issue
        id="ExtraTranslation"
        severity="Fatal"
        message="&quot;`pref_show_app_launcher_icon_title`&quot; is translated here but not found in default locale"
        category="Correctness:Messages"
        priority="6"
        summary="Extra translation"
        explanation="If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It&apos;s technically possible that your application is only intended to run in a specific locale, but it&apos;s still a good idea to provide a fallback.).

Note that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it&apos;s important to clean them up."
        errorLine1="    &lt;string name=&quot;pref_show_app_launcher_icon_title&quot;>Zobraziť ikonu aplikácie&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/pref_strings.xml"
            line="41"
            column="13"/>
    </issue>

    <issue
        id="ExtraTranslation"
        severity="Fatal"
        message="&quot;`pref_show_app_launcher_icon_description`&quot; is translated here but not found in default locale"
        category="Correctness:Messages"
        priority="6"
        summary="Extra translation"
        explanation="If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It&apos;s technically possible that your application is only intended to run in a specific locale, but it&apos;s still a good idea to provide a fallback.).

Note that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it&apos;s important to clean them up."
        errorLine1="    &lt;string name=&quot;pref_show_app_launcher_icon_description&quot;>Zobraziť Nastavenia DashClock v spúšťači&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/pref_strings.xml"
            line="42"
            column="13"/>
    </issue>

    <issue
        id="StringFormatCount"
        severity="Warning"
        message="Inconsistent number of arguments in formatting string `extensions_removed_template`; found both 1 and 0"
        category="Correctness:Messages"
        priority="5"
        summary="Formatting argument types incomplete or inconsistent"
        explanation="When a formatted string takes arguments, it usually needs to reference the same arguments in all translations (or all arguments if there are no translations.

There are cases where this is not the case, so this issue is a warning rather than an error by default. However, this usually happens when a language is not translated or updated correctly."
        errorLine1="    &lt;string name=&quot;extensions_removed_template&quot;>%1%d estensioni rimosse.&lt;/string>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="45"
            column="5"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;zh&quot; (Chinese) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_gmail_accounts_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/pref_strings.xml"
            line="42"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;ko&quot; (Korean) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_gmail_accounts_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/pref_strings.xml"
            line="46"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;zh&quot; (Chinese) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_calendar_selected_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/pref_strings.xml"
            line="58"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;ko&quot; (Korean) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;pref_calendar_selected_summary_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/pref_strings.xml"
            line="62"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;zh&quot; (Chinese) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_days&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="109"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;ko&quot; (Korean) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_days&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="112"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;zh&quot; (Chinese) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="113"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;ko&quot; (Korean) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="116"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;cs&quot; (Czech) the following quantities are not relevant: `two`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;calendar_template_hours&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="118"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;zh&quot; (Chinese) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;missed_calls_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="128"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;ko&quot; (Korean) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;missed_calls_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="131"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;zh&quot; (Chinese) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;sms_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="140"
            column="5"/>
    </issue>

    <issue
        id="UnusedQuantity"
        severity="Warning"
        message="For language &quot;ko&quot; (Korean) the following quantities are not relevant: `one`"
        category="Correctness:Messages"
        priority="3"
        summary="Unused quantity translations"
        explanation="Android defines a number of different quantity strings, such as `zero`, `one`, `few` and `many`. However, many languages do not distinguish grammatically between all these different quantities.

This lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up.).
For example, in Chinese, only the `other` quantity is used, so even if you provide translations for `zero` and `one`, these strings will *not* be returned when `getQuantityString()` is called, even with `0` or `1`."
        url="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="http://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;sms_title_template&quot;>"
        errorLine2="    ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="143"
            column="5"/>
    </issue>

    <issue
        id="ExportedContentProvider"
        severity="Warning"
        message="Exported content providers can provide access to potentially sensitive data"
        category="Security"
        priority="5"
        summary="Content provider does not require permission"
        explanation="Content providers are exported by default and any application on the system can potentially use them to read and write data. If the content provider provides access to sensitive data, it should be protected by specifying `export=false` in the manifest or by protecting it with a permission that can be granted to other applications."
        errorLine1="        &lt;provider android:name=&quot;com.google.android.apps.dashclock.LogAttachmentProvider&quot;"
        errorLine2="        ^">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/AndroidManifest.xml"
            line="274"
            column="9"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (com.google.android.apps.dashclock.DashClockService.1)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private Handler mUpdateHandler = new Handler() {"
        errorLine2="                                         ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/DashClockService.java"
            line="182"
            column="42"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (com.google.android.apps.dashclock.weather.WeatherLocationPreference.LocationChooserDialogFragment.2)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="        private Handler mRestartLoaderHandler = new Handler() {"
        errorLine2="                                                    ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/weather/WeatherLocationPreference.java"
            line="242"
            column="53"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_width` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="        android:layout_width=&quot;wrap_content&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/preference.xml"
            line="37"
            column="9"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/configure_light_background` with a theme that also paints a background (inferred theme is `@style/Theme.Configuration`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;@color/configure_light_background&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_extensions.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/configure_light_background` with a theme that also paints a background (inferred theme is `@style/Theme.Configuration`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;@color/configure_light_background&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_simple_prefs.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/Theme.Configuration`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;?selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/preference.xml"
            line="27"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/Theme.Configuration`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_clock.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.ic_extension_voicemail` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/drawable-nodpi/ic_extension_voicemail.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.pref_homescreen_background_opacity_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;pref_homescreen_background_opacity_title&quot;>Tło widżetu na ekranie głównym&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/pref_strings.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.array.pref_homescreen_background_opacity_display_names` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string-array name=&quot;pref_homescreen_background_opacity_display_names&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/pref_strings.xml"
            line="21"
            column="19"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.pref_show_app_launcher_icon_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;pref_show_app_launcher_icon_title&quot;>Zobraziť ikonu aplikácie&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/pref_strings.xml"
            line="41"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.pref_show_app_launcher_icon_description` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;pref_show_app_launcher_icon_description&quot;>Zobraziť Nastavenia DashClock v spúšťači&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/pref_strings.xml"
            line="42"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.more_options` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;more_options&quot;>More options&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="24"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="22"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.add_another_extension` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;add_another_extension&quot;>Add another extension&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="39"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="35"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.prev_date_style` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;prev_date_style&quot;>Previous date style&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="54"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="43"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="46"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="51"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="52"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="47"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.prev_time_style` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;prev_time_style&quot;>Previous time style&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="55"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="44"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="47"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="52"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="53"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="51"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="48"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.next_date_style` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;next_date_style&quot;>Next date style&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="56"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="45"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="48"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="53"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="54"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="52"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="49"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.next_time_style` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;next_time_style&quot;>Next time style&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="57"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="46"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="49"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="54"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="55"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="53"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="50"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="50"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.next_alarm` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;next_alarm&quot;>Next alarm&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="114"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="105"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="103"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="102"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="103"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="104"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="101"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="109"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="104"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="101"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="107"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="102"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="102"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="107"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="103"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="101"
            column="13"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="101"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.plurals.calendar_template_days` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;plurals name=&quot;calendar_template_days&quot;>"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values/strings.xml"
            line="125"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-cs/strings.xml"
            line="113"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-de/strings.xml"
            line="111"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-el-rGR/strings.xml"
            line="110"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-es/strings.xml"
            line="112"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-fr/strings.xml"
            line="113"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-hu/strings.xml"
            line="109"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-it/strings.xml"
            line="119"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ko/strings.xml"
            line="112"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-nl/strings.xml"
            line="109"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pl/strings.xml"
            line="116"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-pt-rBR/strings.xml"
            line="111"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-ru/strings.xml"
            line="110"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-sk/strings.xml"
            line="117"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-uk/strings.xml"
            line="111"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rCN/strings.xml"
            line="109"
            column="14"/>
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/values-zh-rTW/strings.xml"
            line="109"
            column="14"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_collapsed_list` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_collapsed_list.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_date_style_condensed_bold` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_condensed_bold.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_date_style_default` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_default.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_date_style_simple` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_date_style_simple.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_alpha.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_analog1_black` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog1_black.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_analog1_white` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog1_white.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_analog2_black` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog2_black.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_analog2_white` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_analog2_white.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_big_small` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_big_small.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_condensed` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_condensed.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_default` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_default.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_light` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_light.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.widget_include_time_style_stock` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_time_style_stock.xml"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `FrameLayout` parent is useless; transfer the `background` attribute to the other view"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="        &lt;LinearLayout"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/activity_extension_configuration_simple.xml"
            line="29"
            column="9"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-mdpi, drawable-hdpi, drawable-xhdpi, drawable-xxxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res"/>
    </issue>

    <issue
        id="AppCompatResource"
        severity="Error"
        message="Should use `app:showAsAction` with the appcompat library with `xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;`"
        category="Usability"
        priority="5"
        summary="Menu namespace"
        explanation="When using the appcompat library, menu resources should refer to the `showAsAction` in the `app:` namespace, not the `android:` namespace.

Similarly, when *not* using the appcompat library, you should be using the `android:showAsAction` attribute."
        errorLine1="        android:showAsAction=&quot;never&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/menu/configure_item_overflow.xml"
            line="20"
            column="9"/>
    </issue>

    <issue
        id="AppCompatResource"
        severity="Error"
        message="Should use `app:showAsAction` with the appcompat library with `xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;`"
        category="Usability"
        priority="5"
        summary="Menu namespace"
        explanation="When using the appcompat library, menu resources should refer to the `showAsAction` in the `app:` namespace, not the `android:` namespace.

Similarly, when *not* using the appcompat library, you should be using the `android:showAsAction` attribute."
        errorLine1="        android:showAsAction=&quot;never&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/menu/configure_item_overflow.xml"
            line="23"
            column="9"/>
    </issue>

    <issue
        id="AppCompatResource"
        severity="Error"
        message="Should use `app:showAsAction` with the appcompat library with `xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;`"
        category="Usability"
        priority="5"
        summary="Menu namespace"
        explanation="When using the appcompat library, menu resources should refer to the `showAsAction` in the `app:` namespace, not the `android:` namespace.

Similarly, when *not* using the appcompat library, you should be using the `android:showAsAction` attribute."
        errorLine1="        android:showAsAction=&quot;never&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/menu/configure_overflow.xml"
            line="20"
            column="9"/>
    </issue>

    <issue
        id="AppCompatResource"
        severity="Error"
        message="Should use `app:showAsAction` with the appcompat library with `xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;`"
        category="Usability"
        priority="5"
        summary="Menu namespace"
        explanation="When using the appcompat library, menu resources should refer to the `showAsAction` in the `app:` namespace, not the `android:` namespace.

Similarly, when *not* using the appcompat library, you should be using the `android:showAsAction` attribute."
        errorLine1="        android:showAsAction=&quot;never&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/menu/configure_overflow.xml"
            line="23"
            column="9"/>
    </issue>

    <issue
        id="AppCompatResource"
        severity="Error"
        message="Should use `app:showAsAction` with the appcompat library with `xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;`"
        category="Usability"
        priority="5"
        summary="Menu namespace"
        explanation="When using the appcompat library, menu resources should refer to the `showAsAction` in the `app:` namespace, not the `android:` namespace.

Similarly, when *not* using the appcompat library, you should be using the `android:showAsAction` attribute."
        errorLine1="        android:showAsAction=&quot;never&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/menu/configure_overflow.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/google/android/apps/dashclock/configuration/ConfigureAppearanceFragment$3#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="            public boolean onTouch(View view, MotionEvent motionEvent) {"
        errorLine2="                           ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/configuration/ConfigureAppearanceFragment.java"
            line="204"
            column="28"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/google/android/apps/dashclock/configuration/ConfigureExtensionsFragment$4#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="            public boolean onTouch(View view, MotionEvent motionEvent) {"
        errorLine2="                           ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/configuration/ConfigureExtensionsFragment.java"
            line="180"
            column="28"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`com/google/android/apps/dashclock/ui/SwipeDismissListViewTouchListener#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View view, MotionEvent motionEvent) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/ui/SwipeDismissListViewTouchListener.java"
            line="169"
            column="20"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_appearance.xml"
            line="46"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_appearance.xml"
            line="54"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/grid_item_color.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView android:id=&quot;@android:id/icon&quot;"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_intent.xml"
            line="28"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/pref_layout_color.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/preference.xml"
            line="30"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView android:id=&quot;@+id/settings_button_center_displacement&quot;"
        errorLine2="            ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_main_expanded.xml"
            line="38"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView android:id=&quot;@+id/settings_button_center_displacement&quot;"
        errorLine2="            ^"
        quickfix="studio,adt">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_main_expanded_forced_center.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_marginRight=&quot;16dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginEnd=&quot;16dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_extensions.xml"
            line="74"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:paddingLeft=&quot;24dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="    android:paddingStart=&quot;24dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_calendar.xml"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:paddingRight=&quot;16dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="    android:paddingEnd=&quot;16dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_calendar.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignLeft=&quot;@android:id/text1&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_alignStart=&quot;@android:id/text1&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_calendar.xml"
            line="37"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignParentRight=&quot;true&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_alignParentEnd=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_calendar.xml"
            line="43"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:paddingLeft=&quot;8dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:paddingStart=&quot;8dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_marginLeft=&quot;32dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginStart=&quot;32dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_marginLeft=&quot;4dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:layout_marginStart=&quot;4dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="51"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_marginRight=&quot;12dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:layout_marginEnd=&quot;12dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="52"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_toRightOf=&quot;@android:id/icon1&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:layout_toEndOf=&quot;@android:id/icon1&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="58"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignRight=&quot;@android:id/text1&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:layout_alignEnd=&quot;@android:id/text1&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="69"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignLeft=&quot;@android:id/text1&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:layout_alignStart=&quot;@android:id/text1&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="70"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignLeft=&quot;@android:id/title&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="            android:layout_alignStart=&quot;@android:id/title&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/preference.xml"
            line="57"
            column="13"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:paddingLeft=&quot;16dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:paddingStart=&quot;16dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/preference.xml"
            line="68"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_marginRight=&quot;8dp&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_marginEnd=&quot;8dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_list_item_expanded_extension.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_toRightOf=&quot;@id/icon&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_toEndOf=&quot;@id/icon&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_list_item_expanded_extension.xml"
            line="40"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignParentRight=&quot;true&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_alignParentEnd=&quot;true&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_list_item_expanded_extension.xml"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignLeft=&quot;@id/text1&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_alignStart=&quot;@id/text1&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_list_item_expanded_extension.xml"
            line="47"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 16) you should *also* add `android:layout_alignRight=&quot;@id/text1&quot;`"
        category="Bi-directional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must *also* specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="        android:layout_alignEnd=&quot;@id/text1&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_list_item_expanded_extension.xml"
            line="48"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingStart=&quot;8dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_extension.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingStart=&quot;16dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/preference.xml"
            line="68"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:paddingLeft=&quot;11dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_collapsed_ellipsis.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    clockInnerGravity = isTablet ? Gravity.LEFT : Gravity.RIGHT;"
        errorLine2="                                                                          ~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/render/DashClockRenderer.java"
            line="149"
            column="75"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    clockInnerGravity = isTablet ? Gravity.LEFT : Gravity.RIGHT;"
        errorLine2="                                                           ~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/render/DashClockRenderer.java"
            line="149"
            column="60"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    clockInnerGravity = (isExpanded &amp;&amp; isTablet) ? Gravity.LEFT : Gravity.RIGHT;"
        errorLine2="                                                                                          ~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/render/DashClockRenderer.java"
            line="152"
            column="91"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    clockInnerGravity = (isExpanded &amp;&amp; isTablet) ? Gravity.LEFT : Gravity.RIGHT;"
        errorLine2="                                                                           ~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/render/DashClockRenderer.java"
            line="152"
            column="76"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    clockCentered ? Gravity.CENTER_HORIZONTAL : Gravity.LEFT);"
        errorLine2="                                                                        ~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/render/DashClockRenderer.java"
            line="159"
            column="73"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            case Gravity.RIGHT:"
        errorLine2="                         ~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/java/com/google/android/apps/dashclock/ui/DragGripView.java"
            line="100"
            column="26"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;16dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginLeft=&quot;16dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/activity_extension_configuration_simple.xml"
            line="55"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:drawableStart=&quot;@mipmap/ic_launcher&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:drawableLeft=&quot;@mipmap/ic_launcher&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/dialog_about.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginStart=&quot;32dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;32dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout-sw600dp/dialog_about.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;16dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginRight=&quot;16dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout-sw600dp/dialog_about.xml"
            line="30"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_gravity=&quot;bottom|left&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_appearance.xml"
            line="51"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_gravity=&quot;bottom|right&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/fragment_configure_appearance.xml"
            line="59"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingStart=&quot;16dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;16dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_configure_ab_spinner.xml"
            line="24"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingEnd=&quot;4dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingRight=&quot;4dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_configure_ab_spinner.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:drawableEnd=&quot;@drawable/spinner_triangle&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:drawableRight=&quot;@drawable/spinner_triangle&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_configure_ab_spinner.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingStart=&quot;?android:listPreferredItemPaddingLeft&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingLeft=&quot;?android:listPreferredItemPaddingLeft&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_intent.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingEnd=&quot;?android:listPreferredItemPaddingRight&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingRight=&quot;?android:listPreferredItemPaddingRight&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_intent.xml"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:layout_marginEnd=&quot;8dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginRight=&quot;8dp&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/list_item_intent.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingStart=&quot;11dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingLeft=&quot;11dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/res/layout/widget_include_collapsed_ellipsis.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="RtlEnabled"
        severity="Warning"
        message="The project references RTL attributes, but does not explicitly enable or disable RTL support with `android:supportsRtl` in the manifest"
        category="Bi-directional Text"
        priority="3"
        summary="Using RTL attributes without enabling RTL support"
        explanation="To enable right-to-left support, when running on API 17 and higher, you must set the `android:supportsRtl` attribute in the manifest `&lt;application>` element.
If you have started adding RTL attributes, but have not yet finished the migration, you can set the attribute to false to satisfy this lint check.">
        <location
            file="/home/adorilson/workspace/mestrado/apps_analisadas/net.nurik.roman.dashclock/main/src/main/AndroidManifest.xml"/>
    </issue>

</issues>
